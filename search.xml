<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>meituan</title>
      <link href="meituan/"/>
      <url>meituan/</url>
      
        <content type="html"><![CDATA[<h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><h2 id="一面-1h25min-2020-08-24"><a href="#一面-1h25min-2020-08-24" class="headerlink" title="一面 1h25min 2020.08.24"></a>一面 1h25min 2020.08.24</h2><p>自我介绍</p><p>问简历上的一个微信小程序</p><p>docker（简历上的一个项目有用到），大概问了5，6分钟</p><p>项目的打包、部署方面的一些问题（webpack）</p><p>（项目相关大概问了有20min左右吧）</p><p>讲一下react的生命周期</p><p>平时学习会看哪些文档</p><p>JS方面会看什么文档</p><p>js里面怎么遍历一个文件夹下的所有js后缀文件</p><p>node里面怎么获取到环境变量</p><p>讲一下EventLoop模型</p><p>看代码问输出(eventloop)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误上报机制（try/catch）</p><p>全局的错误捕获</p><p>讲一下原型链是什么</p><p>看题目问问题</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>A<span class="token punctuation">.</span>prototypea<span class="token punctuation">.</span>prototypeA<span class="token punctuation">.</span>__proto__a<span class="token punctuation">.</span>__proto__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new操作符创建实例的时候会做些什么</p><p>执行上下文(this)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span>    getA<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 45</span><span class="token keyword">var</span> getB <span class="token operator">=</span> obj<span class="token punctuation">.</span>getA<span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>js数组用过哪些方法</p><p><code>slice</code>方法和<code>splice</code>方法的区别</p><p>String用过哪些方法</p><p>实现一下String的<code>replace</code>方法（！！！听到题目的时候有点懵了）</p><p>最有成就感的一件事是什么</p><p>有几个offer了</p><p>有什么想问的</p><h2 id="二面-1h13min-2020-08-29"><a href="#二面-1h13min-2020-08-29" class="headerlink" title="二面 1h13min 2020.08.29"></a>二面 1h13min 2020.08.29</h2><p>自我介绍</p><p>介绍一下实习期间的项目</p><p>实习期间遇到的最难解决的问题是什么</p><p>介绍一下自己写的一个小程序（面试官直接就打开手机来看了）</p><p>小程序的里面的图像识别调用的接口</p><p>小程序里面哪些问题比较难解决</p><p>介绍一下自己写的一个H5项目</p><p>怎样部署的？</p><p>docker部署的方式（流程）</p><p>写一道题目，数字格式化，添加千分位逗号，采用正则写法和非正则写法</p><p>本科专业学过哪些计算机专业相关的课程</p><p>成绩排名怎么样</p><p>C语言、计算机网络考试分数怎么样</p><p>问了一下我的博客的一些问题</p><p>大四还有哪些课程</p><p>可以来实习吗，什么时候可以来</p><p>秋招情况怎么样了？还有其他面试吗？有拿了什么offer了吗</p><p>家是哪些的？介意来北京工作吗</p><p>反问环节</p><p>总的来说，二面的话主要还是对着简历上的项目来问，问的都是实习相关、项目相关的问题，而且更多是在看我做了些什么东西，也没有很深入的往下问，问的一些问题也比较像HR面的问题</p><h2 id="HR面-18min-2020-09-02"><a href="#HR面-18min-2020-09-02" class="headerlink" title="HR面 18min 2020.09.02"></a>HR面 18min 2020.09.02</h2><p>确认一下应聘的岗位、部门、城市信息等等</p><p>为什么没有打算考研呢</p><p>是怎么样接触到前端开发，然后想要选择前端开发作为自己的职业呢</p><p>在学校的成绩怎么样</p><p>平时是怎么学习前端开发的呢</p><p>现在的面试情况怎么样了，有面试哪些公司</p><p>最想去哪个公司</p><p>为什么想要来应聘美团呢</p><p>对美团了解多吗</p><p>都通过什么途径了解的美团</p><p>如果现在你拿到了美团和xxx的offer，你会怎么选择呢</p><p>有什么规划吗</p><p>反问环节</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DiDi</title>
      <link href="didi/"/>
      <url>didi/</url>
      
        <content type="html"><![CDATA[<h1 id="滴滴面试"><a href="#滴滴面试" class="headerlink" title="滴滴面试"></a>滴滴面试</h1><h2 id="一面-40min"><a href="#一面-40min" class="headerlink" title="一面 40min"></a>一面 40min</h2><p>JS和TS的区别、联系</p><p>面向对象与面向过程语言的区别</p><p>介绍一下面向对象编程（三个核心）</p><p>AOP了解过吗</p><p>自我介绍（真的是到这里才想起让我自我介绍的!!!）</p><p>git操作熟练吗</p><p>创建一个Git仓库的命令是什么</p><p>git merge 和 git rebase 的区别</p><p>有些文件不想通过git管理要怎么办</p><p>写过后端吗</p><p>SQL写得怎么样，有没有写过复杂的查询语句</p><p>有没有看过哪些库的源代码</p><p>写项目时候有没有遇到比较难的问题，介绍一下</p><p>怎么解决问题的</p><p>DOM操作熟吗</p><p>React框架原理</p><p>开发工具（真的是问开发工具IDEA，当时还听错是开发框架）</p><p>ES6熟吗</p><p>写过的大型项目，介绍一下</p><p>栈和队列的区别</p><p>树的遍历方法,三种遍历方式都讲一下</p><p>LRU缓存（采用的是什么数据结构来存储的？双向链表）</p><p>设计模式了解吗？说一下知道的设计模式（单例、发布订阅、工厂、代理、命令…)</p><p>说一下代理模式是怎么样的</p><p>代理模式有什么好处</p><p>项目中用过哪些设计模式</p><p>HTTPS 和 HTTP 的区别</p><p>HTTPS加密算法</p><p>MD5是对称加密还是非对称</p><p>刷题环节：</p><p>1、给定一个数组和一个值，求两数之和等于这个值的下标</p><p>2、反转单向链表</p><p>总体而言，这轮的面试应该是比较典型的技术面吧，先问一些技术问题，考察一些你的技术广度，看看你会不会用某些技术，有没有学过某些知识，然后在后面写两道算法题，看看你的编码能力</p><h2 id="二面-30min"><a href="#二面-30min" class="headerlink" title="二面 30min"></a>二面 30min</h2><p>自我介绍</p><p>说一下你的技术栈</p><p>React框架的原理</p><p>虚拟DOM有什么好处？解决了什么问题</p><p>如果没有了虚拟DOM，React还能正常运行吗？为什么？</p><p>React为什么要使用JSX模板？</p><p>Redux原理</p><p>为什么Redux要这样设计？</p><p>Redux有什么优势？</p><p>使用一个发布订阅模式来替代Redux可以吗？（可以）</p><p>那为什么还要弄一个redux？</p><p>react-redux的原理是什么？</p><p>JavaScript和Typescript的区别</p><p>TS相对JS有什么优势？（类型推导）</p><p>除了类型推导还有什么？</p><p>webpack的原理</p><p>怎么从入口文件找到所有的文件依赖</p><p>loader和plugin的区别</p><p>NodeJS后端有什么特点？使用于什么场景？</p><p>Node后端开发与Java等其他语言开发有什么优势、劣势？</p><p>（面试官可能觉得我已经扛不住了，决定问我一些开放性的问题了…）</p><p>三年的职业规划？</p><p>怎么看待公司业务的开发和个人技术的发展</p><p>有什么想问我的吗？</p><p>我感觉这一轮的面试有点点像是压力面…全程下来面试官也没有问很多的问题，都是从一个问题出发，然后不断的问哪里哪里怎么样，为什么、哪里哪里又为什么，为什么要这样，为什么会这样….</p><p>整个面试下来，好多地方被面试官问得无话可说，真真确确的感受到了被支配的恐惧！！！</p><p>当然面试官人其实也还是很好的，回答不上来的时候也有换一些角度去引导我思考，无话可说的时候也没有继续为难，后面还问了一些比较开放一些的问题让我放松了一点（真的太难了…）</p><p>总体而言，我觉得这轮的面试，面试官不仅仅是在考察你会不会用某些技术，更主要是在看你对某些技术是否了解深入透彻，是否知道为什么会有人要弄出这么一个技术，它究竟是要解决什么问题</p><h2 id="三面-30min"><a href="#三面-30min" class="headerlink" title="三面 30min"></a>三面 30min</h2><p>最后一轮的技术面遇到的面试官真的是超级超级和蔼的一个面试官，全程都是在聊天式的技术交流</p><p>主要问的问题也是一些开放性的问题，问你遇到的一些技术难题，怎么解决的，还有怎么去学习新的技术的</p><p>感觉这一轮的面试，面试官更多的又是在考察你的学习能力，实际解决问题的能力，还有很多其他方面的综合能力，看你是否有比较好的思考逻辑（也许是因为一下午面了好几个小时了，面试官也不忍心再问太难的问题了吧…）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bytedance</title>
      <link href="bytedance/"/>
      <url>bytedance/</url>
      
        <content type="html"><![CDATA[<h2 id="一面-40min"><a href="#一面-40min" class="headerlink" title="一面 40min"></a>一面 40min</h2><p>自我介绍</p><p>JS用得多还是TS用得多</p><p>TS和JS有什么区别</p><p>ES6用得多吗</p><p>CSS水平垂直居中怎么实现（通过flex布局实现）</p><p>flex布局的哪些属性</p><p>了解哪些状态码</p><p>常见的请求方法</p><p>写题目：</p><p>第一个是关于闭包方面的题目吧，调用一个函数，每次调用时候数字加一</p><p>第二个是一个图片对齐的问题（不太好描述….）</p><h2 id="二面-43min"><a href="#二面-43min" class="headerlink" title="二面 43min"></a>二面 43min</h2><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>自我介绍</p><p>是通信工程专业，那主要的计算机专业的课程也学过吧？</p><p>计算机网络，操作系统这些课程学过吗（然后就开始狂问计算机网络的问题了….）</p><p>OSI网络模型</p><p>UDP 与 TCP特点、区别</p><p>三次握手</p><p>拥塞控制</p><p>HTTP常见首部</p><p>状态码  302 ， 304 ，307</p><p>HTTP缓存</p><p>HTTPS</p><p>HTTP /2.0  HTTP / 3.0</p><p>Cookie ，属性设置</p><p>浏览器cookie控制</p><p>CSRF原理，防范</p><p>跨站和跨域的关系</p><p>content-type multipart ， 异步文件上传，文件怎么编码</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>a标签设置 padding ， margin</p><p>代码解释（关于 inline-block 垂直、水平间隙出现原因）</p><p>HTML对空白字符（换行、回车…)的处理</p><p>CSS position  absolute相对谁定位，子元素父元素都是absulte 是怎么定位，absolute  能否相对 fixed 定位</p><p>绝对定位，元素重叠时的覆盖关系</p><p>CSS 动画，用 绝对定位，改变坐标(left,right)还是用translate 更好，为什么</p><p>white-space 属性取值和作用</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>script 标签 async  和 defer 的区别</p><p>有没有看过内核源码</p><p>内核渲染过程</p><p>解释重绘与回流，以及什么情况会引发回流</p><p>GPU的作用</p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>小程序与web环境的区别</p><p>小程序的渲染机制</p><p>webview 了解多少</p><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>变量类型判断</p><p>浮点运算机制</p><p>精度问题，为什么有精度问题，怎么解决</p><p>ES6有哪些扩展</p><p>迭代器，怎么实现迭代器，迭代器迭代什么数据结构，怎么进行迭代</p><h2 id="三面-40min"><a href="#三面-40min" class="headerlink" title="三面 40min"></a>三面 40min</h2><p>柯里化函数</p><p>react 虚拟DOM原理</p><p>react Diff算法</p><p>Webpack的原理</p><p>Webpack用途</p><h2 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tencent</title>
      <link href="tencent/"/>
      <url>tencent/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><h2 id="一面-70min-2020-08-17"><a href="#一面-70min-2020-08-17" class="headerlink" title="一面 70min 2020.08.17"></a>一面 70min 2020.08.17</h2><p>自我介绍</p><p>HTTP、HTTPS</p><p>HTTPS握手</p><p>// 还有很多很多问题，主要都是通过简历上的项目来问，然后扩展</p><h2 id="一面-60min-2020-08-21"><a href="#一面-60min-2020-08-21" class="headerlink" title="一面 60min 2020.08.21"></a>一面 60min 2020.08.21</h2><p>自我介绍</p><p>行内元素和块级元素的区别、有哪些常见的块级元素和行内元素</p><p>布局方法，垂直布局的实现（flex布局，非flex布局）</p><p>flex布局的一些属性（<code>flex-direction</code>,<code>justify-content</code>,<code>align-items</code>）</p><p>flex容器的子元素设置<code>flex-grow</code>的表现</p><p><code>flex:1</code>是什么意思</p><p>CSS常见选择器</p><p>选择器优先级</p><p>HTML里面引用CSS文件的方法</p><p>CSS文件通常怎么放置，怎么组织</p><p>浏览器渲染过程</p><p>为什么加载放在head标签内，脚本文件加载放在body标签后面</p><p>如果浏览器要渲染一个很大很大的页面文件，会怎么渲染（是一边解析一边渲染，还是解析完再渲染）</p><p>首屏渲染指的是什么</p><p>首屏渲染时间</p><p>怎么加快首屏渲染</p><p>浏览器兼容问题有了解过吗</p><p>讲一下JavaScript数组的常用方法</p><p>数组的reduce方法怎么用</p><p>函数防抖和节流有了解吗？讲一下</p><p>ES6 变量定义和ES5变量定义区别</p><p>function定义函数和箭头函数的区别</p><p>ES6还了解什么（Promise，async/await , 展开运算符，generator，…）</p><p>说一下EventLoop模型</p><p>讲一下<code>this</code>指向的问题</p><p>JavaScript对象继承方法（常见的6种）</p><p>讲一下原型链（原型对象和实例）</p><p>浏览器安全有了解过吗？讲一下常见的安全问题和防范方法（CSRF、XSS）</p><p>React框架里面怎么防范XSS</p><p>react里面要怎么不转译字符，直接插入一段HTML代码（__dangerousInnerHtml属性）</p><p>跨域了解吗？讲一下跨域产生的原因和解决方法(jsonp,服务端设置响应头，nginx方向代理…)</p><p>仔细讲一下jsonp的原理（这里回答得不是很好…）</p><p>GET和POST方法的区别</p><p>HTTP缓存讲一下</p><p>给定一个字符串，找出出现次数最多的字符和出现的次数</p><p>复杂度是多少</p><p>反问环节</p><h2 id="二面-38min-2020-08-25"><a href="#二面-38min-2020-08-25" class="headerlink" title="二面 38min 2020.08.25"></a>二面 38min 2020.08.25</h2><p>自我介绍</p><p>前端学习方法</p><p>webpack打包原理</p><p>项目重新构建后，怎么控制引用的文件的版本，怎么保证用户访问到的是新的版本的文件</p><p>异常处理，全局的异常捕获处理（node端、浏览器端）</p><p>路由原理，怎么实现跳转、页面是否会刷新</p><p>new 操作符的原理</p><p>原型继承怎么实现</p><p>原型继承有什么缺点？怎么解决</p><p>同源策略是什么</p><p>不同源的时候有什么限制</p><p>跨域怎么解决</p><p>服务端设置响应头实现跨域的原理是什么</p><p>websocket连接过程</p><p>https握手过程</p><p>为什么握手过程要这样设计</p><p>这种方式会存在中间人攻击的情况吗</p><p>Node了解吗</p><p>koa框架有什么特点</p><p>koa中间件原理</p><p>如果很多的一组整数，怎么取出最大的三个，复杂度是多少</p><p>JS大数相加（如果是负数呢…）</p><p>反问环节</p><p>总的来说，面试官重要是从一个点开始，逐渐往深入去问，然后问的问题，对我来说的话，都稍微属于比较难一点的问题，</p><p>知识点涉及得比较泛，而且很多都是偏向于问原理和比较深入的理解，明明是前端开发岗位，但是还是问了很多其他方面的知识</p><p>自己很多很多的问题回答得很不好，确实是在很多知识方面都没有理解透，很多原理方面的问题都没有去了解过，也还有很多问题虽然有了解过，但是了解得比较浅，不扎实</p><p>然后算法方面也真的特别差!!!</p><p>后面的时间，一定要把算法好好补一下，然后项目整体开发流程过程中用到的技术，webpack,nginx,docker 好好整理一下相关的知识点</p><p>然后计算机网络方面，还得好好看书</p><p>最后的话，一定要去研究一下很多知识的底层实现了！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-链表题目合集</title>
      <link href="leetcode-linkedlist/"/>
      <url>leetcode-linkedlist/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="【21】合并两个有序链表"><a href="#【21】合并两个有序链表" class="headerlink" title="【21】合并两个有序链表"></a>【21】合并两个有序链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="./21.png" alt=""></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>先新建一个链表，得到头结点指针和当前指针<code>current</code>，最开始<code>current</code>指向的是头结点。</p><p>对两个链表进行遍历，当有其中一个遍历完之后就退出循环。</p><p>每次遍历对两个节点进行比较，将值小的节点添加到结果中，即<code>current.next  = Math.min(l1,l2)</code>，然后，小的节点对应的链表往后移动一个节点，大的节点对应的链表不动</p><p>同时<code>current</code>指针后移，即<code>current = current.next</code></p><p>循环退出后，只需要将剩余的链表的节点直接添加到新的链表中即可得到最终的结果</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> link1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> link2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>link1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> link2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>link1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> link2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> link1<span class="token punctuation">;</span>            link1 <span class="token operator">=</span> link1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> link2<span class="token punctuation">;</span>            link2 <span class="token operator">=</span> link2<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>link1<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> link1<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>link2<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> link2<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【23】合并K个升序链表"><a href="#【23】合并K个升序链表" class="headerlink" title="【23】合并K个升序链表"></a>【23】合并K个升序链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./23.png" alt=""></p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>通过迭代，取相邻的两个链表合并，得到一个新的合并后的链表，然后用这一个新的链表去和下一个链表来合并，直到所有的链表合并完，得到最终的一个合并链表</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode[]} lists * @return {ListNode} */</span><span class="token keyword">var</span> mergeKLists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> targetList <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        targetList <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>targetList<span class="token punctuation">,</span> lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> targetList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并两个升序链表</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> l1 <span class="token operator">=</span> list1<span class="token punctuation">;</span>    <span class="token keyword">let</span> l2 <span class="token operator">=</span> list2<span class="token punctuation">;</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-08】环路检测"><a href="#【面试题02-08】环路检测" class="headerlink" title="【面试题02.08】环路检测"></a>【面试题02.08】环路检测</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="./detectCycle.png" alt=""></p><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p>先通过一个快指针<code>fast</code>和一个慢指针<code>slow</code>对链表进行遍历，快指针每次前进两个节点，慢指针每次前进一个节点</p><p>如果链表没有环，则快指针很快会遍历完，并且此时<code>fast !== slow</code>，因此可以直接返回 <code>null</code></p><p>如果链表有环，则快指针和慢指针迟早会在某一个节点相遇，此时可以跳出遍历的循环。</p><p>判断出了有环后，还需要找出环的入口节点。</p><p>此时让快指针重新指向头结点<code>fast = head</code>（或者新建一个都一样，目的是要有一个指针从头结点开始遍历），慢指针依旧停在相遇的节点位置，然后头指针<code>fast</code>和慢指针<code>slow</code>都以相同的速度每次移动一个节点</p><p>根据数学推导可以知道，头指针<code>fast</code>和慢指针<code>slow</code>第一次相遇的位置恰好就是环的入口节点。</p><p>关于为什么恰好在环的入口相遇，可以查看Leetcode上题解中一个<a href="https://leetcode-cn.com/problems/linked-list-cycle-lcci/solution/kuai-man-zhi-zhen-zheng-ming-bi-jiao-yan-jin-by-ch/" target="_blank" rel="noopener">推导过程</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> detectCycle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fast<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【142】环形链表"><a href="#【142】环形链表" class="headerlink" title="【142】环形链表||"></a>【142】环形链表||</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">题目链接-142.环形链表||</a></p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/submissions/" target="_blank" rel="noopener">题目链接-141.环形链表</a></p><p><img src="./142.png" alt=""></p><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> detectCycle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【328】奇偶链表"><a href="#【328】奇偶链表" class="headerlink" title="【328】奇偶链表"></a>【328】奇偶链表</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="./328.png" alt=""></p><h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><p>用一个指针存储偶链表，对链表进行遍历，每次将奇节点的后一个节点添加到偶链表后面，然后在原链表中删掉这个节点 <code>odd.next=odd.next.next</code>，然后奇链表（原链表）遍历指针后移</p><p>最后循环完后，将偶链表接到奇链表后面即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> oddEvenList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> oddHead <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> odd <span class="token operator">=</span> oddHead<span class="token punctuation">;</span>    <span class="token keyword">let</span> evenHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> even <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>odd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        even <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>even <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    odd <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>odd<span class="token punctuation">.</span>next <span class="token operator">=</span> evenHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> oddHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【430】扁平化多级链表"><a href="#【430】扁平化多级链表" class="headerlink" title="【430】扁平化多级链表"></a>【430】扁平化多级链表</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>具体描述可以查看<a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/" target="_blank" rel="noopener">LeetCode官网</a></p><h3 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h3><p>解决问题的关键是将双向链表旋转九十度，看成是一颗二叉树，节点的<code>child</code>子链表指针就相当于是树中节点的左指针，节点的<code>next</code>指针相当于是树中节点的右指针</p><p>然后通过对树进行前序遍历（深度优先遍历）的顺序，就是扁平化后的结果。</p><p>在实现的时候，通过深度优先的思想，通过一个<code>current</code>指针，从头结点开始开始遍历，将<code>current</code>节点的子链表<code>current.child</code>进行扁平化，然后返回扁平化后的链表的尾节点，与<code>current</code>节点的下一个节点<code>current.next</code>进行连接</p><p>具体的解法描述可以查看<a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/solution/bian-ping-hua-duo-ji-shuang-xiang-lian-biao-by-lee/" target="_blank" rel="noopener">LeetCode官方题解</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * // Definition for a Node. * function Node(val,prev,next,child) { *    this.val = val; *    this.prev = prev; *    this.next = next; *    this.child = child; * }; */</span><span class="token comment" spellcheck="true">/** * @param {Node} head * @return {Node} */</span><span class="token keyword">var</span> flatten <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flattenDFS</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flattenDFS</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">const</span> tail <span class="token operator">=</span> <span class="token function">flattenDFS</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> current<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">flattenDFS</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-02】返回倒数第K个节点"><a href="#【面试题02-02】返回倒数第K个节点" class="headerlink" title="【面试题02.02】返回倒数第K个节点"></a>【面试题02.02】返回倒数第K个节点</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./interview.02.02.png" alt=""></p><h3 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h3><h4 id="方法1-数组存储"><a href="#方法1-数组存储" class="headerlink" title="方法1 数组存储"></a>方法1 数组存储</h4><p>通过一个数组来存放每个节点的值，然后一直是遍历链表，直到链表遍历结束</p><p>然后返回<code>arr[arr.length - k]</code>就可以得到倒数第K个节点</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {number} */</span><span class="token keyword">var</span> kthToLast <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)，</p><p>空间复杂度：O(n)</p><h4 id="解法2-双指针"><a href="#解法2-双指针" class="headerlink" title="解法2 双指针"></a>解法2 双指针</h4><p>通过两个指针<code>fast</code>和<code>slow</code>进行遍历，先让<code>fast</code>指针往后遍历k个节点，然后<code>fast</code>和<code>slow</code>再同时往后遍历，相当于是用<code>slow</code>指针将<code>fast</code>指针前面相隔<code>k</code>个节点的节点存储下来</p><p>当<code>fast</code>节点遍历到链表末尾的时候，<code>slow</code>节点正好指向了倒数第K个节点的位置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {number} */</span><span class="token keyword">var</span> kthToLast <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="【19】删除链表的倒数第N个节点"><a href="#【19】删除链表的倒数第N个节点" class="headerlink" title="【19】删除链表的倒数第N个节点"></a>【19】删除链表的倒数第N个节点</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">题目链接-19.删除链表的倒数第N个节点</a></p><p><img src="./19.png" alt=""></p><h3 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h3><p>先通过双指针法找到倒数第N个节点，然后将节点删除即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">var</span> removeNthFromEnd <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里如果题目没有说n一定是有效的话，就还需要考虑fast === null 的情况</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【876】链表的中间节点"><a href="#【876】链表的中间节点" class="headerlink" title="【876】链表的中间节点"></a>【876】链表的中间节点</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./876.png" alt=""></p><h3 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h3><p>通过两个指针，一个快指针<code>fast</code>，一个慢指针<code>slow</code>，两个指针同时从链表头结点开始遍历。</p><p>快指针每次向后移动两个节点，慢指针每次向后移动一个节点，当快指针到达链表末尾的时候，慢指针就恰好在链表的中间位置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> middleNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><p>如果不要求空间复杂度为O(1)的话，还可以使用一个O(n)的空间复杂度的解法，将链表遍历依次，用数组将每个节点存储下来，然后根据数组的长度直接确定中间节点的索引位置</p><h2 id="【61】旋转链表"><a href="#【61】旋转链表" class="headerlink" title="【61】旋转链表"></a>【61】旋转链表</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/rotate-list/submissions/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./61.png" alt=""></p><h3 id="解法-9"><a href="#解法-9" class="headerlink" title="解法"></a>解法</h3><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><p>将一个链表的每个节点都向后移动K个位置，实际上就是将链表最后的K个节点形成的子链表，移动到链表的开头位置</p><p>例如示例中</p><pre><code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</code></pre><p>实际就是将后面的两个节点<code>4-&gt;5</code>，移动到链表的开头位置，变成</p><pre><code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code></pre><p>因此，可以通过两个指针<code>fast</code>和<code>slow</code>，首先先让<code>fast</code>指针往前移动<code>k</code>个节点，然后再让<code>fast</code>和<code>slow</code>一起同时往后移动，这样当<code>fast</code>指针刚好遍历到链表末尾的时候，<code>slow</code>指针就正好停在了倒数第K个节点的位置，然后只需要将<code>slow</code>节点后面的子链表作为原本链表的开头即可</p><p>上面的分析是基于<code>k &lt; n</code>的情况的，也即移动的位置是小于节点的个数的。当<code>k&gt;=n</code>的时候，需要让链表可以重新回到头结点，重新开始遍历，因此<code>fast</code>指针 先走K个位置，应该按照下面的代码来执行</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next <span class="token operator">||</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时还应该考虑到，既然K可能大于n，则<code>fast</code>指针在先走了<code>k</code>个节点之后，其与<code>slow</code>指针之间的位置关系就有两种情况</p><p>第一种就是正常情况，<code>fast</code>指针在<code>slow</code>指针前面。这种情况下，只需要按照上面的分析过程，在<code>fast</code>移动到链表末尾后，将<code>slow</code>指向的节点作为新的头结点。这里还要注意，将<code>slow</code>后面的节点形成的子链表移动到原本链表开头的时候，要讲前一个链表的连接断开，否则链表会形成一个环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> prevHead <span class="token operator">=</span> head<span class="token punctuation">;</span>head <span class="token operator">=</span> slow<span class="token punctuation">;</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> prevHead<span class="token punctuation">;</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">return</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种情况是<code>fast</code>指针恰好停留在了<code>slow</code>指针所在的位置，也即头结点，这是因为<code>k % n === 0</code>的情况造成的，这种情况下，就相当于链表中每个节点向后移动的位置是<code>0</code>，因此最后的结果就是原本的链表，此时直接返回原本的头结点即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {ListNode} */</span><span class="token keyword">var</span> rotateRight <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> k <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next <span class="token operator">||</span> head<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        tail <span class="token operator">=</span> fast<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> prevHead <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> slow<span class="token punctuation">;</span>    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> prevHead<span class="token punctuation">;</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="【剑指offer35】复杂链表复制"><a href="#【剑指offer35】复杂链表复制" class="headerlink" title="【剑指offer35】复杂链表复制"></a>【剑指offer35】复杂链表复制</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/" target="_blank" rel="noopener">题目链接-剑指offer35.复杂链表的复制</a></p><p><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">题目链接-138.复制带随机指针的链表</a></p><p><img src="./offer-35.png" alt=""></p><h3 id="解法-10"><a href="#解法-10" class="headerlink" title="解法"></a>解法</h3><p>先用一个<code>Map</code>将所有节点存入到其中，然后依次取出来，再连接上<code>next</code>和<code>random</code>指针即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * // Definition for a Node. * function Node(val, next, random) { *    this.val = val; *    this.next = next; *    this.random = random; * }; */</span><span class="token comment" spellcheck="true">/** * @param {Node} head * @return {Node} */</span><span class="token keyword">var</span> copyRandomList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            <span class="token keyword">const</span> random <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>random<span class="token punctuation">)</span>            next <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            random <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>random <span class="token operator">=</span> random<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-03】删除中间节点"><a href="#【面试题02-03】删除中间节点" class="headerlink" title="【面试题02.03】删除中间节点"></a>【面试题02.03】删除中间节点</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/delete-middle-node-lcci/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./interview.02.03.png" alt=""></p><h3 id="解法-11"><a href="#解法-11" class="headerlink" title="解法"></a>解法</h3><p>因为题目限定了只能访问到要删除的节点，不能访问到链表的头结点，因此没有办法按照正常的删除节点的方式，从链表头结点开始去遍历。</p><p>要删除当前的节点，同时 因为前一个节点的指针没有办法获取到，因此必须要保持原来的节点指针顺序不变，只去改变节点存储的值。</p><p>从当前要删除的节点开始向后遍历，用后一个节点的值替换当前节点上的值，节点的指针不需要改动，然后在倒数第二个节点的时候，将其的<code>next</code>指针断开，变成<code>null</code>即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>val <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【237】删除链表中的节点"><a href="#【237】删除链表中的节点" class="headerlink" title="【237】删除链表中的节点"></a>【237】删除链表中的节点</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./237.png" alt=""></p><h3 id="解法-12"><a href="#解法-12" class="headerlink" title="解法"></a>解法</h3><p>题目其实和上面的<strong>面试题02.03 删除链表的中间节点</strong>一样</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>val <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【剑指offer-18】删除链表的节点"><a href="#【剑指offer-18】删除链表的节点" class="headerlink" title="【剑指offer-18】删除链表的节点"></a>【剑指offer-18】删除链表的节点</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./offer-18.png" alt=""></p><h3 id="解法-13"><a href="#解法-13" class="headerlink" title="解法"></a>解法</h3><p>对链表进行遍历，将当前节点和前一个节点保存下来，找出要删除的指定节点后，将前一个节点的<code>next</code>指针指向当前节点的后继节点，同时将当前节点的<code>next</code>指针断开即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} val * @return {ListNode} */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【203】移除链表元素"><a href="#【203】移除链表元素" class="headerlink" title="【203】移除链表元素"></a>【203】移除链表元素</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./203.png" alt=""></p><h3 id="解法-14"><a href="#解法-14" class="headerlink" title="解法"></a>解法</h3><p>通过对链表进行遍历，如果当前节点的值和指定的值相等，则当前节点需要被删除。</p><p>在删除节点的时候，通过前一个节点的指针<code>prev</code>，将<code>prev.next = current.next</code>和<code>current.next</code>来将当前节点链表中移除</p><p>应该注意的是，因为这个题里面，要将链表中所有节点值等于指定值的节点都删除，因此在删除了前面的节点后，还需要继续向后遍历去删除其他需要删除的节点，这个时候，只需要将<code>current = next</code>来继续向后遍历即可，<code>prev</code>指针应该停留在原来的节点不动，否则对于连续多个节点都是需要删除的节点的时候，就会有一些节点被跳过。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} val * @return {ListNode} */</span><span class="token keyword">var</span> removeElements <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【206】反转链表"><a href="#【206】反转链表" class="headerlink" title="【206】反转链表"></a>【206】反转链表</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><img src="./206.png" alt=""></p><h3 id="解法-15"><a href="#解法-15" class="headerlink" title="解法"></a>解法</h3><p>通过两个指针，一个指向当前正在处理的节点<code>current</code>，一个指向前面的一个节点<code>prev</code>，从头结点开始遍历，每次将当前节点的后继节点<code>current.next</code>改成前面的一个节点<code>prev</code></p><p>因为此时会将当前节点与其原本的后继节点之间的连接断开，因此需要用一个变量<code>next</code>将下一个节点先保存下来</p><p>然后<code>prev</code>指针向后移动<code>prev = current;</code>，当前指针也向后移动<code>current = next;</code></p><p>最后遍历完之后，反转后的头结点就是<code>prev</code>指针指向的节点，因此只需要返回<code>prev</code>即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【455】两数相加"><a href="#【455】两数相加" class="headerlink" title="【455】两数相加||"></a>【455】两数相加||</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./445.png" alt=""></p><h3 id="解法-16"><a href="#解法-16" class="headerlink" title="解法"></a>解法</h3><p>因为不能将链表翻转，而加法需要从末尾开始计算，所以先将链表中的数据存储的栈中，然后再依次计算各个位上的相加，最后得到一个新的链表</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> stack2<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> v1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> extra<span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-05】链表求和"><a href="#【面试题02-05】链表求和" class="headerlink" title="【面试题02.05】链表求和"></a>【面试题02.05】链表求和</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/sum-lists-lcci/" target="_blank" rel="noopener">题目链接-面试题02.05 链表求和</a></p><p><img src="./interview.02.05.png" alt=""></p><h3 id="解法-17"><a href="#解法-17" class="headerlink" title="解法"></a>解法</h3><p>这个题因为给出的链表是反序的数字链表，因此直接按照数字相加的方式执行计算即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1 <span class="token operator">||</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">?</span> num1<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num2 <span class="token operator">?</span> num2<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num1 <span class="token operator">=</span> num1 <span class="token operator">&amp;&amp;</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num2 <span class="token operator">=</span> num2 <span class="token operator">&amp;&amp;</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1290】二进制链表转整数"><a href="#【1290】二进制链表转整数" class="headerlink" title="【1290】二进制链表转整数"></a>【1290】二进制链表转整数</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./1290.png" alt=""></p><h3 id="解法-18"><a href="#解法-18" class="headerlink" title="解法"></a>解法</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>如果不限制空间复杂度为O(1)的话，可以先用一个栈将链表中的节点都存到栈中，然后根据二进制转换成十进制的计算规则来计算最后的结果</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>如果限定了空间复杂度为O(1)，则可以先将链表翻转，然后再计算</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【24】两两交换链表中的节点"><a href="#【24】两两交换链表中的节点" class="headerlink" title="【24】两两交换链表中的节点"></a>【24】两两交换链表中的节点</h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>[题目链接]（<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/）" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs/）</a></p><p><img src="./24.png" alt=""></p><h3 id="解法-19"><a href="#解法-19" class="headerlink" title="解法"></a>解法</h3><p>两个一组进行节点交换，并且不能是简单的值交换，必须是实际节点间的指针交换。</p><p>具体的交换方法可以按照下面的示意图所示：</p><p><img src="./24-pic.png" alt=""></p><p>通过一个<code>current</code>指针来对链表进行遍历，从头结点开始，每次将当前节点的原本的下一个节点<code>prevNext</code>先保存起来，然后将当前节点的后继节点指针改为指向原本后继节点<code>prevNext</code>的后继节点，也即是<code>current.next = prevNext.next</code>，然后将原本的后继节点的后继指针改成指向当前节点，即<code>prevNext.next = current</code>，也就完成了两个节点的位置交换</p><p>同时还要考虑到，在进行当前的两个节点的交换的时候，还要将前一个节点（就是<code>next</code>指针指向了<code>current</code>的节点）的后继指针指向也修正一下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> swapPairs <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> newHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 交换之后的新的头结点</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> prevNext <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNext<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prevNext<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNext<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将前一个节点的next指针修正</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="【92】反转链表-（反转链表的某一段）"><a href="#【92】反转链表-（反转链表的某一段）" class="headerlink" title="【92】反转链表||（反转链表的某一段）"></a>【92】反转链表||（反转链表的某一段）</h2><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/" target="_blank" rel="noopener">题目链接-92.反转链表||</a></p><p><img src="./92.png" alt=""></p><h3 id="解法-20"><a href="#解法-20" class="headerlink" title="解法"></a>解法</h3><p>因为题目中要求<strong>扫描一遍</strong>完成反转，因此在对链表进行遍历的时候，先把反转区域的开始节点<code>satrt</code>和前一个节点<code>startPrev</code>找到</p><p>在往后继续遍历的时候，对于反转区域的节点，执行反转操作即可。然后到最后，找到反转区域的结尾节点为<code>end</code>，其后继节点为<code>endNext</code>，只需要将<code>startPrev</code>的后继指针指向<code>end</code>，同时<code>start</code>节点的后继指针指向<code>endNext</code>即可完成反转</p><p><img src="./92-pic.png" alt=""></p><p>考虑到如果<code>m</code>的值是<code>1</code>的时候，<code>startPrev</code>指针为空，不能正常反转，因此可以在头结点<code>head</code>前面添加一个虚拟头结点<code>headPrev</code>，当<code>m</code>的值为<code>1</code>的时候，<code>startPrev</code>指针指向<code>headPrev</code>即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} m * @param {number} n * @return {ListNode} */</span><span class="token keyword">var</span> reverseBetween <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> satrt <span class="token operator">=</span> startPrev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> headPrev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    startPrev <span class="token operator">=</span> prev <span class="token operator">||</span> headPrev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 考虑到 m = 1的情况</span>    start <span class="token operator">=</span> current<span class="token punctuation">;</span>    prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    startPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>    start<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token keyword">return</span> headPrev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【25】K个一组翻转链表"><a href="#【25】K个一组翻转链表" class="headerlink" title="【25】K个一组翻转链表"></a>【25】K个一组翻转链表</h2><h3 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">题目链接-25.K个一组翻转链表</a></p><p><img src="./25.png" alt=""></p><h3 id="解法-21"><a href="#解法-21" class="headerlink" title="解法"></a>解法</h3><p>按照前面的翻转链表某一段区域的方法，通过两个指针<code>start</code>和<code>startPrev</code>指针，分别指向当前翻转区域的开头节点和其前一个节点</p><p>然后翻转指定数量的<code>k</code>个的一组节点，翻转后将反转区域的头结点和尾节点指针指向修正一下即可</p><p>在翻转完上一组，然后进行下一组的翻转时，需要记得更新<code>startPrev</code>指针指向的节点，指向当前反转区域的头结点<code>start</code></p><p>因为题目中要求了<code>k</code>个一组进行链表翻转，不足<code>k</code>个的则不需要进行翻转了，因此每一次进行翻转之前需要先看一下后面的节点数是否还够<code>k</code>个</p><p><img src="./25-pic.png" alt=""></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {ListNode} */</span><span class="token keyword">var</span> reverseKGroup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> headPrev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  headPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> startPrev <span class="token operator">=</span> headPrev<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先判断一下剩余的节点是否够k个</span>    <span class="token keyword">let</span> groupSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>groupSize <span class="token operator">&lt;=</span> k <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      groupSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不足k个就直接不需要处理了，够的话将current指针重新指回到之前的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>groupSize <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> current <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// k个一组进行翻转翻转</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>      prev <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 修改翻转后的首尾节点后继指针指向</span>    startPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>    start<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    startPrev <span class="token operator">=</span> start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 下一组开头节点的前驱结点</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> headPrev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【剑指offer-06】从尾到头打印链表"><a href="#【剑指offer-06】从尾到头打印链表" class="headerlink" title="【剑指offer-06】从尾到头打印链表"></a>【剑指offer-06】从尾到头打印链表</h2><h3 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">题目链接-剑指offer-06</a></p><p><img src="./offer-06.png" alt=""></p><h3 id="解法-22"><a href="#解法-22" class="headerlink" title="解法"></a>解法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number[]} */</span><span class="token keyword">var</span> reversePrint <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【143】重排链表"><a href="#【143】重排链表" class="headerlink" title="【143】重排链表"></a>【143】重排链表</h2><h3 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/reorder-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./143.png" alt=""></p><h3 id="解法-23"><a href="#解法-23" class="headerlink" title="解法"></a>解法</h3><p>题目的意思是，对于一个有n个节点的链表，原本的排列依次是节点1 – 节点n，现在需要将其改成第一个节点后面接着是倒数第一个节点，然后再是第二个节点，后面接着倒数第二个节点，依次往下</p><p>相当于是两个节点作为一组，<code>节点i</code>和<code>节点n-i</code>作为一组连接起来</p><p>显然，这个题目里面，需要能够同时访问到链表的开头节点和链表的结尾节点，并且开头的节点要求<strong>先进先出</strong>，后面的节点要求<strong>后进先出</strong>，自然就很容易想到使用一个队列和一个栈的方式来存储，将前半部分节点放入队列，后半部分放入栈</p><p>但是考虑到节点的个数是不确定的，不知道链表的中间位置会在哪，因此采用一个队列+一个栈的方式，实现起来有点问题，于是想到了双向队列。</p><p>先对链表进行一次遍历，将所有的节点放入到双向队列中，为了防止链表出现环，在遍历的时候顺便把节点间的连接断开。取出来的时候，先取出对头的节点，以及队尾的节点，这样刚好是一组<code>节点i</code>和<code>节点n-i</code>的组合，连接起来即可</p><p>每一个组合之间还需要相互连接起来，因此需要一个指针<code>prev</code>将前一个组合的后面的一个节点保存下来</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {void} Do not return anything, modify head in-place instead. */</span><span class="token keyword">var</span> reorderList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> doubleQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        doubleQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>doubleQueue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> odd <span class="token operator">=</span> doubleQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            even <span class="token operator">=</span> doubleQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>        even <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">)</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> even<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><h2 id="【455】两数相加-1"><a href="#【455】两数相加-1" class="headerlink" title="【455】两数相加||"></a>【455】两数相加||</h2><h3 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./445.png" alt=""></p><h3 id="解法-24"><a href="#解法-24" class="headerlink" title="解法"></a>解法</h3><p>因为不能将链表翻转，而加法需要从末尾开始计算，所以先将链表中的数据存储的栈中，然后再依次计算各个位上的相加，最后得到一个新的链表</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> stack2<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> v1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> extra<span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-05】链表求和-1"><a href="#【面试题02-05】链表求和-1" class="headerlink" title="【面试题02.05】链表求和"></a>【面试题02.05】链表求和</h2><h3 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/sum-lists-lcci/" target="_blank" rel="noopener">题目链接-面试题02.05 链表求和</a></p><p><img src="./interview.02.05.png" alt=""></p><h3 id="解法-25"><a href="#解法-25" class="headerlink" title="解法"></a>解法</h3><p>这个题因为给出的链表是反序的数字链表，因此直接按照数字相加的方式执行计算即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1 <span class="token operator">||</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">?</span> num1<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num2 <span class="token operator">?</span> num2<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num1 <span class="token operator">=</span> num1 <span class="token operator">&amp;&amp;</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num2 <span class="token operator">=</span> num2 <span class="token operator">&amp;&amp;</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1290】二进制链表转整数-1"><a href="#【1290】二进制链表转整数-1" class="headerlink" title="【1290】二进制链表转整数"></a>【1290】二进制链表转整数</h2><h3 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./1290.png" alt=""></p><h3 id="解法-26"><a href="#解法-26" class="headerlink" title="解法"></a>解法</h3><h4 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h4><p>如果不限制空间复杂度为O(1)的话，可以先用一个栈将链表中的节点都存到栈中，然后根据二进制转换成十进制的计算规则来计算最后的结果</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="翻转链表-1"><a href="#翻转链表-1" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>如果限定了空间复杂度为O(1)，则可以先将链表翻转，然后再计算</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【82】删除排序链表中的重复元素"><a href="#【82】删除排序链表中的重复元素" class="headerlink" title="【82】删除排序链表中的重复元素||"></a>【82】删除排序链表中的重复元素||</h2><h3 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./82.png" alt=""></p><h3 id="解法-27"><a href="#解法-27" class="headerlink" title="解法"></a>解法</h3><p>题目中要求的是，删除所有重复的元素，只要是有重复的节点，就将这些相同的节点<strong>全部</strong>删除，而不仅仅是把重复的节点删除</p><p>首先先通过<code>prev</code>指针将前面的一个节点保存起来，然后通过两个指针<code>left</code>和<code>right</code>，开始时候两个指针指向同一个节点，然后判断<code>right.val === right.next.val</code>，如果<code>right</code>指针指向的节点的值和其后继节点的值相同，也就意味着当前节点是个重复节点，需要删除。</p><p>先继续让<code>right</code>指针往后遍历，把这一段重复的节点都先找出来，然后通过<code>prev.next = right.next</code>来将这一段重复的节点全部删除掉</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> deleteDuplicates <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>val <span class="token operator">===</span> right<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找出与当前节点相同的所有的重复节点</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 删除重复节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> head <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 正常非重复节点指针后移</span>            prev <span class="token operator">=</span> left<span class="token punctuation">;</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【83】删除排序链表中的重复元素"><a href="#【83】删除排序链表中的重复元素" class="headerlink" title="【83】删除排序链表中的重复元素"></a>【83】删除排序链表中的重复元素</h2><h3 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">题目链接-83.删除排序链表中的重复元素</a></p><p><img src="./83.png" alt=""></p><h3 id="解法-28"><a href="#解法-28" class="headerlink" title="解法"></a>解法</h3><p>通过两个指针<code>left</code>和<code>right</code>对链表进行遍历，每次遍历一个节点的时候，<code>left</code>和<code>right</code>指针指向同一个节点，然后通过<code>right</code>指针去看下一个节点是否和当前节点重复了，如果重复，则让<code>right</code>指针一直往下走，把重复的多个节点都找出来，最后<code>right</code>指针停在重复的一段节点的最末尾</p><p>此时执行判断<code>left !== right</code>可以得到<code>true</code>，进而知道<code>left</code>和<code>right</code>之间是一段重复的节点，只需要将第一个节点之外的其他节点删除即可，也就是执行<code>left.next = right.next</code>，然后继续遍历后面的节点</p><p><img src="./83-pic.png" alt=""></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> deleteDuplicates <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>val <span class="token operator">===</span> right<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            right<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-01】移除未排序链表的重复节点"><a href="#【面试题02-01】移除未排序链表的重复节点" class="headerlink" title="【面试题02.01】移除未排序链表的重复节点"></a>【面试题02.01】移除未排序链表的重复节点</h2><h3 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-duplicate-node-lcci/" target="_blank" rel="noopener">题目链接-面试题02.01.移除未排序链表的重复节点</a></p><p><img src="./interview.02.01.png" alt=""></p><h3 id="解法-29"><a href="#解法-29" class="headerlink" title="解法"></a>解法</h3><p>题目给出的链表是未排序的链表，重复的节点不一定会是连续出现，因此不能按照双指针法来解决。</p><p>这里可以通过一个数组，在遍历链表的时候，先看一下是数组中是否已经有这个节点值出现过了，如果有的话则说明这是一个重复出现的节点，需要删除，而如果没有出现过的话，则说明这个节点没有出现过，只需要将节点值存入数组，然后继续向后面遍历即可。</p><p>在遍历的时候，可以通过一个<code>prev</code>指针来存储当前节点的前一个节点，也可以直接通过遍历前驱结点的方式来遍历</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> removeDuplicateNodes <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> ele <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除后面的一个节点，同时当前节点指针停在原来位置不动</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【234】回文链表"><a href="#【234】回文链表" class="headerlink" title="【234】回文链表"></a>【234】回文链表</h2><h3 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./234.png" alt=""></p><h3 id="解法-30"><a href="#解法-30" class="headerlink" title="解法"></a>解法</h3><h4 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h4><p>通过一个双向队列，先将链表中的所有的节点放入到双向队列中，然后对双向队列进行遍历，每次取出队头结点和队尾节点，如果两个值相同，则进行下一次的比较，如果两个值不同，则意味着不是回文链表，直接返回<code>false</code></p><p>应该注意，对双向队列的循环应该在其元素个数为1的时候停止</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dique <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dique<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>dique<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dique<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> dique<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双向队列其实还可以通过一个数组+双指针来代替，一个指针指向头部，从前面往后面移动，一个指针指向尾部，从后面往前面移动</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><h4 id="翻转链表-2"><a href="#翻转链表-2" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>如果是要限制空间复杂度为O(1)的话，就需要将链表从中间位置分开，变成两半的链表，然后将后面的一半子链表翻转</p><p>翻转之后的链表如果与前面一半的链表节点一一对应相等，则说明链表是回文链表</p><p>这里应该要注意到的是，因为将后面的一半链表翻转了，改变了原本的链表结构，因此需要在返回结果前将链表再修正回来。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> secondList <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> firstList <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> firstList<span class="token punctuation">,</span> p2 <span class="token operator">=</span> secondList<span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">!==</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mid<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>secondList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【817】链表组件"><a href="#【817】链表组件" class="headerlink" title="【817】链表组件"></a>【817】链表组件</h2><h3 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/linked-list-components/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./817.png" alt=""></p><h3 id="解法-31"><a href="#解法-31" class="headerlink" title="解法"></a>解法</h3><p>题目中要找到给定的列表<code>G</code>中的组件个数，可以通过找出列表<code>G</code>中，属于某个组件的结尾节点的个数，即为组件的个数。</p><p>判断某个节点的值是否是某一个组件的结尾，依据是，列表G中包含了当前节点的值，但是不包含当前节点的后继节点的值，</p><p>也即是<code>G.includes(current.val) &amp;&amp; !G.includes(current.next.val)</code>，同时考虑到链表的最后一个节点<code>current.next</code>不存在，因此最后的判断</p><p>某个节点的值是否是某一个组件的结尾的依据就是<code>G.includes(current.val) &amp;&amp;(current.next == null || !G.includes(current.next.val))</code></p><p><code>G</code>中的元素值可能会重复，因此将其通过一个集合来去重</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number[]} G * @return {number} */</span><span class="token keyword">var</span> numComponents <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> G<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1367】二叉树中的列表"><a href="#【1367】二叉树中的列表" class="headerlink" title="【1367】二叉树中的列表"></a>【1367】二叉树中的列表</h2><h3 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/linked-list-in-binary-tree/" target="_blank" rel="noopener">题目链接-1367.二叉树中的列表</a></p><p><img src="./1367.png" alt=""></p><h3 id="解法-32"><a href="#解法-32" class="headerlink" title="解法"></a>解法</h3><p>题目中要求是查找一颗二叉树中是否存在某一条路径的节点值，恰好与给出的链表的节点值一一对应相等。</p><p>因为二叉树中的路径并不一定会出现在树的哪一个位置，整棵树的所有的位置理论上都可能是满足条件的结果。</p><p>如果是暴力枚举的话，则需要在遍历链表的节点的时候，一个一个的去看树中是否有节点对应，并且是满足条件的路径。</p><p>还有一个比较容易想到的思路是递归，先看当前节点是否和链表的对应位置的节点相等，如果相等则继续树的左节点或是右节点是否与链表的后面的节点相等，形成路径。如果当前节点与链表对应位置的节点值不相等，则看树中当前节点的左子树或是右子树是否满足条件。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> isSubPath <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubPath</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubPath</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">!==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【725】分隔链表"><a href="#【725】分隔链表" class="headerlink" title="【725】分隔链表"></a>【725】分隔链表</h2><h3 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/split-linked-list-in-parts/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./725.png" alt=""></p><h3 id="解法-33"><a href="#解法-33" class="headerlink" title="解法"></a>解法</h3><p>题目的意思是，将一个原本的完整的链表，分割成指定的<code>k</code>段的子链表，并且每段的节点数尽可能平均，任意两段之间节点个数差距不超过1。</p><p>返回的结果是一个数组，数组中的元素是对应的每一段的子链表的头结点</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} root * @param {number} k * @return {ListNode[]} */</span><span class="token keyword">var</span> splitListToParts <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> extra <span class="token operator">=</span> size <span class="token operator">%</span> k<span class="token punctuation">;</span>    <span class="token keyword">const</span> groupSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>size <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> groupIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>groupIndex <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>j <span class="token operator">&lt;</span> groupSize <span class="token operator">+</span> <span class="token punctuation">(</span>groupIndex <span class="token operator">&lt;</span> extra <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            item <span class="token operator">=</span> item<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            current <span class="token operator">=</span> current <span class="token operator">?</span> current<span class="token punctuation">.</span>next <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">[</span>groupIndex<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【86】分隔链表"><a href="#【86】分隔链表" class="headerlink" title="【86】分隔链表"></a>【86】分隔链表</h2><h3 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">题目链接-86.分隔链表</a></p><p><img src="./86.png" alt=""></p><h3 id="解法-34"><a href="#解法-34" class="headerlink" title="解法"></a>解法</h3><p>题目的意思是，给定一个特定的值<code>x</code>，对于链表中的每个节点，所有小于这个特定值<code>x</code>的节点，都应该排在大于或者等于这个特定值的节点前面，并且所有节点的相对顺序应该保持不变。</p><p>分析后可以知道，实际上就是要将链表中的节点值小于特定值的节点，移动到前面来，而节点值大于等于这个特定值的节点，则保持在原位不动即可。</p><p><img src="./86-pic-1.png" alt=""></p><p>根据分析，只需要对链表进行遍历，然后如果当前节点的值小于指定的值<code>x</code>，则移动该节点到前面</p><p>因为要保持节点的相对位置不动，因此需要用一个指针<code>left</code>来标记前面哪个节点是最新移动过来的，然后将当前节点放到这个<code>left</code>指针的后面，同时更新<code>left</code>指针指向</p><p><img src="./86-pic-2.png" alt=""></p><p>考虑到一个极端的情况，即给定的值<code>x</code>比链表中所有节点的值都要大，此时所有节点都需要移动，但是分析发现，此时会满足<code>left.next === current</code>，因此这种情况下不需要移动节点，只需要继续向后遍历即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} x * @return {ListNode} */</span><span class="token keyword">var</span> partition <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 节点是链表第一个节点，或者是连续的多个节点小于x</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev <span class="token operator">||</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> current <span class="token operator">===</span> left<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                prev <span class="token operator">=</span> left <span class="token operator">=</span> current<span class="token punctuation">;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 先将节点从链表中删除</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第一个要移动的节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> oldHead <span class="token operator">=</span> head<span class="token punctuation">;</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> oldHead<span class="token punctuation">;</span>                head <span class="token operator">=</span> current<span class="token punctuation">;</span>                left <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> next <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                left<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>                left <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者可以通过添加一个虚拟头结点，这样就能把这些特殊情况都转变成正常处理，统一起来</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} x * @return {ListNode} */</span><span class="token keyword">var</span> partition <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> headPrev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  headPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> left <span class="token operator">=</span> headPrev<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>next <span class="token operator">===</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      left<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>      left <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      prev <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> headPrev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-04】分割链表"><a href="#【面试题02-04】分割链表" class="headerlink" title="【面试题02.04】分割链表"></a>【面试题02.04】分割链表</h2><h3 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/partition-list-lcci/" target="_blank" rel="noopener">题目链接-面试题02.04.分割链表</a></p><p><img src="./interview.02.04.png" alt=""></p><h3 id="解法-35"><a href="#解法-35" class="headerlink" title="解法"></a>解法</h3><p>这个题目和之前<a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">题目链接-86.分隔链表</a>的链表分隔有一些不一样，86题中要求的是节点的相对位置保持不变，因此只需要将节点值小于给定值<code>x</code>的节点移动到前面即可</p><p>而这个题中，要求的是每个节点都要移动，同样还是将链表分割成小于<code>x</code>和大于等于<code>x</code>的两段，并且是头插入的方式，后面移动的节点排在前面移动的节点的前面</p><p>这个题的解法可以通过分别将节点值小于<code>x</code>和大于等于<code>x</code>的节点放到两个新链表中，然后最后再将两个链表连接起来即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} x * @return {ListNode} */</span><span class="token keyword">var</span> partition <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> leftHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rightHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> leftEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftEnd<span class="token punctuation">)</span> leftEnd <span class="token operator">=</span> current<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> leftHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      leftHead<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> rightHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      rightHead<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    current <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> rightHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有节点的值都比x大</span>  leftEnd<span class="token punctuation">.</span>next <span class="token operator">=</span> rightHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">return</span> leftHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【剑指offer52】两个链表的第一个公共节点"><a href="#【剑指offer52】两个链表的第一个公共节点" class="headerlink" title="【剑指offer52】两个链表的第一个公共节点"></a>【剑指offer52】两个链表的第一个公共节点</h2><h3 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/" target="_blank" rel="noopener">题目链接-剑指offer52.两个链表的第一个公共节点</a></p><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">题目链接-160.相交链表</a></p><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noopener">题目链接-面试题02.07.链表相交</a></p><p><img src="./offer-52.png" alt=""></p><h3 id="解法-36"><a href="#解法-36" class="headerlink" title="解法"></a>解法</h3><p>题目中的意思是两个链表，可能会有一段公共的子链表。</p><p>对于两个链表，对每个链表都进行分段处理。两个链表的公共子链表部分即为<strong>C</strong>，第一个链表的剩余的非公共部分即为<strong>A</strong>，第二个链表的非公共部分记为<strong>B</strong> 。第一个链表可以记为<strong>A+C</strong>，第二个链表可以记为<strong>B+C</strong>。</p><p>通过两个指针分别从两个链表开始遍历，<code>la</code>指针从第一个链表开始遍历，当遍历到第一个链表的末尾后，再跳回到第二个链表的头结点，从第二个链表开头，遍历第二个链表。</p><p><code>lb</code>指针从第二个链表开始遍历，当遍历到第二个链表末尾的时候，跳回到第一个链表的头结点，遍历第一个链表。</p><p>这样，<code>la</code>指针在遍历第一个链表的时候，走过的距离（节点数）为<strong>A+C</strong>，后面遍历完第二个链表时走的距离为<strong>B</strong>，走过的总距离为<strong>A+C+B</strong></p><p><code>lb</code>指针相应的，走过的距离为<strong>B+C+A</strong>，两个指针走过的距离相等，此时如果两个链表有公共部分，则两个指针恰好会在两个链表的公共部分交叉位置相遇，因此判断循环退出的条件为<code>la !== lb</code></p><p>如果两个链表没有公共部分，相当于<strong>C</strong>的长度为0，此时第一个指针恰好走到第二个链表末尾，第二个指针恰好走到第一个指针的末尾，然后下一次循环的时候就有<code>la ===null</code>,<code>lb === null</code>，同样会满足<code>la === lb</code>，跳出循环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} headA * @param {ListNode} headB * @return {ListNode} */</span><span class="token keyword">var</span> getIntersectionNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>headA<span class="token punctuation">,</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> la <span class="token operator">=</span> headA<span class="token punctuation">,</span> lb <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>la <span class="token operator">!==</span> lb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        la <span class="token operator">=</span> la <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> la<span class="token punctuation">.</span>next <span class="token punctuation">:</span> headB<span class="token punctuation">;</span>        lb <span class="token operator">=</span> lb <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> lb<span class="token punctuation">.</span>next <span class="token punctuation">:</span> headA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> la<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【148】排序链表"><a href="#【148】排序链表" class="headerlink" title="【148】排序链表"></a>【148】排序链表</h2><h3 id="题目描述-33"><a href="#题目描述-33" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/sort-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./148.png" alt=""></p><h3 id="解法-37"><a href="#解法-37" class="headerlink" title="解法"></a>解法</h3><p>因为题目中要求的时间复杂度是O(nlogn)，空间复杂度是常数级，想到可以通过<strong>归并排序</strong>来实现。</p><p>先将链表分开成为左右两段，然后通过递归排好两段子链表，然后将两段子链表合并得到排好序的新链表</p><p>应该要注意的是，先找到链表的中间节点，将链表分割成前后两段的时候，要将中间节点和其后继节点之间的连接断开。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> sortList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> next <span class="token operator">=</span> mid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    mid<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> curLeft <span class="token operator">=</span> left<span class="token punctuation">,</span> curRight <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">const</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curLeft <span class="token operator">&amp;&amp;</span> curRight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curLeft<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> curRight<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> curLeft<span class="token punctuation">;</span>            curLeft <span class="token operator">=</span> curLeft<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> curRight<span class="token punctuation">;</span>            curRight <span class="token operator">=</span> curRight<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curLeft<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> curLeft<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curRight<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> curRight<span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【147】对链表进行插入排序"><a href="#【147】对链表进行插入排序" class="headerlink" title="【147】对链表进行插入排序"></a>【147】对链表进行插入排序</h2><h3 id="题目描述-34"><a href="#题目描述-34" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/" target="_blank" rel="noopener">题目链接-147.对链表进行插入排序</a></p><p><img src="./147.png" alt=""></p><h3 id="解法-38"><a href="#解法-38" class="headerlink" title="解法"></a>解法</h3><p> 对链表遍历的时候，从链表的第二个节点开始遍历，因为第一个节点认为是已经排好序的。</p><p>因为链表是单向链表，在查找当前节点的插入位置的时候，应该从头结点开始查找。在查找插入位置之前，先进行判断是否需要执行插入操作，即<code>prev.val &gt; current.val</code></p><p>节点插入的时候，要考虑在头结点之前插入的情况</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> insertionSortList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>val <span class="token operator">></span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> insertPosition <span class="token operator">=</span> <span class="token function">getInsertPosition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> insertPosition<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInsertPosition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> head<span class="token punctuation">,</span> leftPrev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftPrev <span class="token operator">=</span> left<span class="token punctuation">;</span>        left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> leftPrev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> target<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> ele<span class="token punctuation">;</span>        ele<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        target<span class="token punctuation">.</span>next <span class="token operator">=</span> ele<span class="token punctuation">;</span>        ele<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1019】链表中的下一个更大节点"><a href="#【1019】链表中的下一个更大节点" class="headerlink" title="【1019】链表中的下一个更大节点"></a>【1019】链表中的下一个更大节点</h2><h3 id="题目描述-35"><a href="#题目描述-35" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">题目链接-1019.链表中的下一个更大节点</a></p><p><img src="./1019.png" alt=""></p><h3 id="解法-39"><a href="#解法-39" class="headerlink" title="解法"></a>解法</h3><p>直接按照题目的意思，暴力检索即可。</p><p>对链表进行遍历，对于每个节点，再去看其后面的节点中是否存在有节点值比当前节点更大的，有就得到当前节点对应的结果，没有则数组对应的位置写入0即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number[]} */</span><span class="token keyword">var</span> nextLargerNodes <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>val <span class="token operator">></span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        next <span class="token operator">||</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1171】从链表中删去总和值为零的连续节点"><a href="#【1171】从链表中删去总和值为零的连续节点" class="headerlink" title="【1171】从链表中删去总和值为零的连续节点"></a>【1171】从链表中删去总和值为零的连续节点</h2><h3 id="题目描述-36"><a href="#题目描述-36" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/" target="_blank" rel="noopener">题目链接-1171.从链表中删去总和值为零的连续节点</a></p><p><img src="./1171.png" alt=""></p><h3 id="解法-40"><a href="#解法-40" class="headerlink" title="解法"></a>解法</h3><h4 id="暴力检索"><a href="#暴力检索" class="headerlink" title="暴力检索"></a>暴力检索</h4><p>对链表进行遍历，当前节点<code>current</code>，先判断是否值为0，如果是0的话直接先删除这个节点。如果不是0，则存起来这个节点的值，然后遍历当前节点<code>current</code>后面的节点，查找是否存在使得连续一段的总和值为0的节点段，有的话则将其删除，没有的话则<code>prev</code>指针和<code>current</code>指针往后移动</p><p>在删除某一段总和值为0的子链表的时候，<code>prev.next = remain.next</code>，然后<code>prev</code>指针不能往后移动，应该停在原位，并且<code>current</code>指针应该跳到删除的子链表段的结尾节点的下一个节点，即<code>current = remain.next</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> removeZeroSumSublists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">let</span> remain <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">let</span> isDeleted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在下面的remian的循环中是否找到并删除了总和值为零的子链表段</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>remain<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> remain<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                current <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                remain<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                isDeleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            remain <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDeleted<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 删除了链表段的时候，prev指针停在原位，current指针移到 remain.next</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map存储总和"><a href="#Map存储总和" class="headerlink" title="Map存储总和"></a>Map存储总和</h4><p>通过两次遍历链表，第一次遍历的时候，通过一个<code>Map</code>，将每个节点与其前面节点的总和值作为<code>key</code>，当前节点作为值<code>value</code>存储起来</p><p>因为如果两个节点之间的节点总和值为0的话，则两个节点在计算当前节点与其前面节点的总和值的时候，得到的<code>sum</code>应该是相等的，在存到<code>map</code>的时候，就会覆盖掉前面的节点。</p><p>而在第二次遍历的时候，为了找到哪些节点之间的总和值为0，就可以看一下当前节点<code>current</code>与其前面节点的总和值<code>sum</code>为键，对应的节点<code>value</code>是哪一个，如果<code>current</code>与<code>value</code>两个节点是同一个节点，则说明当前节点与其后面的所有节点之间的总和值都不是0，则只需要继续遍历下一个节点即可。而如果两个节点不是同一个节点，则说明这两个节点之间的总和值为0，则需要将这两个节点之间的子链表删除掉，也即是执行<code>current.next = map.get(sum).next</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> removeZeroSumSublists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    current <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试 2020-06-30</title>
      <link href="front-interview-wepie/"/>
      <url>front-interview-wepie/</url>
      
        <content type="html"><![CDATA[<h2 id="前端面试"><a href="#前端面试" class="headerlink" title="前端面试"></a>前端面试</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span>、自己动手写一个localStorage<span class="token number">2</span>、简单实现Node的Events模块<span class="token number">3</span>、给出一个区间的集合，请合并所有重叠的区间。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span> 区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 重叠<span class="token punctuation">,</span> 将它们合并为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span> 区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> 可被视为重叠区间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>通过<code>Map</code> 来做数据存储：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LocalStorageByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>Object</code> 来做数据存储：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LocalStorageByObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>个人的理解，<code>localSrotage</code> 应该是个单例，所以写成了单例模式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> LocalStorage <span class="token operator">=</span> LocalStorageByObject<span class="token punctuation">;</span><span class="token keyword">const</span> ProxyLocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>LocalStorage<span class="token punctuation">,</span> <span class="token punctuation">{</span>  construct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LocalStorageByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LocalStorageByObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> LocalStorage <span class="token operator">=</span> LocalStorageByObject<span class="token punctuation">;</span><span class="token keyword">const</span> ProxyLocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>LocalStorage<span class="token punctuation">,</span> <span class="token punctuation">{</span>  construct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> _localStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:1,b:2}</span>_localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">_delete</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> subscribers<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      cb <span class="token operator">&amp;&amp;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">cancel</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscribers<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subscribers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> subscribers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        subscribers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> userLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'fail'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>reson<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`user login failed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reson<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`USER_LOGIN_FAILE ==> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'success'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`getUserInfo ==> `</span></span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`USER_LOGIN_SUCCESS`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> event <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>  events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    userLogin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>userLogin<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span>userLogin<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'wenjiang'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// getUserInfo ==>  { name: 'wenjiang' } , USER_LOGIN_SUCCES</span>userLogin<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'NETWORK_ERROR'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入: [[1,3],[2,6],[8,10],[15,18]]</span><span class="token comment" spellcheck="true">// 输出: [[1,6],[8,10],[15,18]]</span><span class="token keyword">function</span> <span class="token function">mergeSection</span><span class="token punctuation">(</span>sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> last <span class="token operator">=</span> sections<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>prevStart<span class="token punctuation">,</span> prevEnd<span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>currentStart<span class="token punctuation">,</span> currentEnd<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token keyword">const</span> targetStart <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> targetEnd <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> sign1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevEnd <span class="token operator">-</span> currentStart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sign2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevStart <span class="token operator">-</span> currentStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign1 <span class="token operator">&amp;&amp;</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign2 <span class="token operator">&amp;&amp;</span>      sign1 <span class="token operator">!==</span> sign2 <span class="token comment" spellcheck="true">// 区间包含的情况</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span>      <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>targetStart<span class="token punctuation">,</span> targetEnd<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>  <span class="token keyword">return</span> merged<span class="token punctuation">}</span><span class="token keyword">const</span> sample1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sample2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 6 ], [ 8, 10 ], [ 15, 18 ] </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 5 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h3><p>在第三题的实现中，上面的方法，没有考虑到<strong><em>区间跳格合并</em></strong>的情况<br>如果把示例输入改成如下：<br>把 [8,10] 和 [1,6] 调换顺序，则上面的方案没办法合并到 [1,3] 和 [1,6]</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> sample1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决这个问题，只需要保证区间是按照区间右端点进行排序的就可以。<br>修改后的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSection</span><span class="token punctuation">(</span>sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 按区间右端点进行升序排序，防止出现区间跳格合并的情况</span>  <span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> last <span class="token operator">=</span> sections<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>prevStart<span class="token punctuation">,</span> prevEnd<span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>currentStart<span class="token punctuation">,</span> currentEnd<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token keyword">const</span> targetStart <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> targetEnd <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> sign1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevEnd <span class="token operator">-</span> currentStart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sign2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevStart <span class="token operator">-</span> currentStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign1 <span class="token operator">&amp;&amp;</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign2 <span class="token operator">&amp;&amp;</span>      sign1 <span class="token operator">!==</span> sign2 <span class="token comment" spellcheck="true">// 区间包含的情况</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span>      <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>targetStart<span class="token punctuation">,</span> targetEnd<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>  <span class="token keyword">return</span> merged<span class="token punctuation">}</span><span class="token keyword">const</span> sample1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sample2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 6 ], [ 8, 10 ], [ 15, 18 ] </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 5 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="personal-resume/"/>
      <url>personal-resume/</url>
      
        <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>姓名：廖文江</li><li>性别：男</li><li>学校：华中师范大学 本科大三</li><li>专业：通信工程专业</li><li>兴趣爱好：听歌、跑步、打篮球</li><li>Email：<a href="mailto:fireworksman@163.com">fireworksman@163.com</a></li><li>个人博客：<a href="http://blog.wenjiang.info">http://blog.wenjiang.info</a></li><li>Github：<a href="https://github.com/WenJiang99" target="_blank" rel="noopener">WenJiang99</a></li></ul><h2 id="主要技能"><a href="#主要技能" class="headerlink" title="主要技能"></a>主要技能</h2><p><code>Javascript</code> , <code>Typescript</code> , <code>CSS</code> , <code>HTML</code> , <code>React</code> , <code>Taro</code> , <code>NodeJs</code> , <code>Koa</code> , <code>EggJs</code> , <code>Webpack</code>, <code>Mysql</code> , <code>MongoDB</code></p><h2 id="主要课程"><a href="#主要课程" class="headerlink" title="主要课程"></a>主要课程</h2><ul><li>《模拟电子技术》</li><li>《数字电子技术》</li><li>《数据结构》</li><li>《操作系统》</li><li>《计算机网络》</li><li>《数据库原理与应用》</li></ul><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><h3 id="2019-07-04-–-2019-08-31-大二暑假"><a href="#2019-07-04-–-2019-08-31-大二暑假" class="headerlink" title="2019.07.04 – 2019.08-31 (大二暑假)"></a>2019.07.04 – 2019.08-31 (大二暑假)</h3><ul><li>公司：武汉金山WPS</li><li>部门：商业化产品研发(前端开发)</li><li>工作：主要从事于 <strong>小程序</strong> 开发，使用的是<strong>Taro</strong>框架，主要技术栈是 <code>React</code> + <code>Less</code> + <code>Typescript</code></li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><h3 id="2019-10-30-–-2019-11-15-大三上"><a href="#2019-10-30-–-2019-11-15-大三上" class="headerlink" title="2019.10.30 – 2019.11.15 (大三上)"></a>2019.10.30 – 2019.11.15 (大三上)</h3><ul><li>项目名称：新媒体大赛项目（校级）</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/new-media-re" target="_blank" rel="noopener">new-media-re</a></li><li>项目简介：基于 <code>React</code> + <code>React-Router</code> + <code>Antd</code> 的静态页面项目</li></ul><h3 id="2019-11-30-–-2019-12-08-大三上"><a href="#2019-11-30-–-2019-12-08-大三上" class="headerlink" title="2019.11.30 – 2019.12.08 (大三上)"></a>2019.11.30 – 2019.12.08 (大三上)</h3><ul><li>项目名称：文创比赛项目（省级）</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/cultural-creation-re" target="_blank" rel="noopener">cultural-creation</a></li><li>项目简介：基于 <code>React</code> + <code>React-Router</code> + <code>Antd</code> 的静态页面项目</li></ul><h3 id="2020-01-14-–-2020-04-10-（大三寒假）"><a href="#2020-01-14-–-2020-04-10-（大三寒假）" class="headerlink" title="2020.01.14 – 2020.04.10 （大三寒假）"></a>2020.01.14 – 2020.04.10 （大三寒假）</h3><ul><li>项目名称：一个类似于课程管理平台的前端项目之一</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/courses-teacher" target="_blank" rel="noopener">courses-teacher</a></li><li>项目简介：一个基于 <code>Typescript</code>+ <code>React</code>+<code>React-Router</code> +<code>Redux</code> + <code>webpack</code> + <code>Antd</code> + <code>docker</code> 的H5移动端项目</li></ul><h3 id="2020-01-14-–2020-04-10-大三寒假"><a href="#2020-01-14-–2020-04-10-大三寒假" class="headerlink" title="2020.01.14 –2020.04.10 (大三寒假)"></a>2020.01.14 –2020.04.10 (大三寒假)</h3><ul><li>项目名称：一个类似于课程管理平台的后端服务器</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/courses-server" target="_blank" rel="noopener">courses-server</a></li><li>项目简介：一个基于 <code>Koa</code> + <code>Typescript</code> + <code>mongoose</code> + <code>docker</code> 的 Node服务器</li></ul><h2 id="荣誉-amp-证书"><a href="#荣誉-amp-证书" class="headerlink" title="荣誉&amp;证书"></a>荣誉&amp;证书</h2><ul><li>英语四级证书</li><li>英语六级证书</li><li>计算机二级(python)</li><li>实习证明（前端开发）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
            <tag> 信息 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
