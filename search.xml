<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode#String 赎金信</title>
      <link href="/leetcode/string/canconstruct/readme/"/>
      <url>/leetcode/string/canconstruct/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/ransom-note/submissions/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/canConstruct" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- <--! select a type of post img ref --> --><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/canConstruct/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>逐个遍历 “赎金信” <code>ransomNote</code> 中的字符，看在杂志字符串 <code>magazine</code>中是否存在，存在则在杂志字符串中删除此字符（删除一个），不存在则直接 <code>return false;</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} ransomNote * @param {string} magazine * @return {boolean} */</span><span class="token keyword">var</span> canConstruct <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ransomNote<span class="token punctuation">,</span> magazine<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ransomNote<span class="token punctuation">.</span>length <span class="token operator">></span> magazine<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> ransomNote<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>magazine<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ransomNote<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        magazine <span class="token operator">=</span> magazine<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>ransomNote<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里replace 不能加 `g`标志</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：84ms, 81.98%<br>内存：40.7MB</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 反转字符串</title>
      <link href="/leetcode/string/reversestring/readme/"/>
      <url>/leetcode/string/reversestring/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/reverseString" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- <--! select a type of post img ref --> --><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/reverseString/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个 <code>javascript</code>中有相应的数组方法 <code>reverse</code> 来完成，直接调用就可以.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead. */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：136ms, 64.18%<br>内存：46.6MB</p><h2 id="解法2-逐个反转"><a href="#解法2-逐个反转" class="headerlink" title="解法2 逐个反转"></a>解法2 逐个反转</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>上面解法1显然过于依赖语言的特性，如果要从通用一点的解决思想来考虑的话，就是遍历一下数组（遍历到一半），然后收尾对应位置的字符调换位置即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead. */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，下面这一句语句时使用了解构赋值来调换收尾两个元素的值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href=""></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 验证回文字符串</title>
      <link href="/leetcode/string/ispalindrome/readme/"/>
      <url>/leetcode/string/ispalindrome/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/valid-palindrome/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/isPalindrome" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/isPalindrome/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法1-数组反转"><a href="#解法1-数组反转" class="headerlink" title="解法1 数组反转"></a>解法1 数组反转</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为只需要考虑数字、字母，并且不需要考虑大小写，因此需要先对字符串中的字符进行处理，去掉除了数字和字母外的字符,同时，字符串应该统一成大写或者统一小写</p><p>然后只需要比较一下字符串反转后和原来字符串是否相等就可以知道是否是回文串了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^0-9a-zA-Z]/ig</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> chars<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">===</span> chars<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：80ms,80.28%<br>内存：38MB,23.08%</p><h2 id="解法2-双向“指针”"><a href="#解法2-双向“指针”" class="headerlink" title="解法2 双向“指针”"></a>解法2 双向“指针”</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同样的，先对字符做一些格式处理，然后定义两个索引<code>head</code> , <code>root</code>分别指向字符串的开头和结尾，比较两个索引位置的字符是否相同</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\da-z]/gi</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        root <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> head <span class="token operator">>=</span> root<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> head <span class="token operator">&lt;</span> root <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head <span class="token operator">++</span><span class="token punctuation">;</span>        root <span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 二进制求和</title>
      <link href="/leetcode/string/addbinary/readme/"/>
      <url>/leetcode/string/addbinary/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/add-binary/" target="_blank" rel="noopener">Leetcode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/addBinary" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt=""><br><img src="./readme/problem.png" alt=""></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>看到题目描述后的第一个想法是，<strong>先把二进制数转换成十进制，然后求和再换成二进制</strong>，于是开始写了一个版本</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">toDecimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">toDecimal</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {String} str * @return {Number} */</span><span class="token keyword">function</span> <span class="token function">toDecimal</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是提交之后却没有通过，在看到了出现错误的案例之后让我一下惊了…</p><p><img src="./error.png" alt=""><br><img src="./readme/error.png" alt=""></p><p>老实说我确实是没有考虑到可能会有这样的输入，然后因为超出了<code>JavaScript</code>数值类型数据的范围导致了运算错误</p><pre><code>&quot;10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101&quot;&quot;110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011&quot;</code></pre><p>看来，直接转换成十进制运算似乎是行不通的。</p><p>于是想到把输入的两个字符串就当成字符串来处理，一个一个字符的直接按照 <strong>二进制加法</strong> 运算规则来计算，然后结果也存到一个字符串或者数组中，这样就可以避免输入的数值超出数据范围的问题了。</p><h2 id="解法1-模拟二进制运算"><a href="#解法1-模拟二进制运算" class="headerlink" title="解法1 模拟二进制运算"></a>解法1 模拟二进制运算</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如上所说，应该按照字符串或者数组来对输入进行处理，<strong>从最低位开始往最高位 按位相加求和，得到个位和进位</strong>,个位直接就是输出的结果中对应位置的字符，而进位直接传到下一次进行运算，最后把数组转换成字符串返回</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>long<span class="token punctuation">,</span> short<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">></span> b<span class="token punctuation">.</span>length        <span class="token operator">?</span> <span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">:</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> unit<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> long<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>unit<span class="token punctuation">,</span> extra<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byteSum</span><span class="token punctuation">(</span>long<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">>=</span> short<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> short<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> extra<span class="token punctuation">)</span>        target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    extra <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 二进制加法运算 * @param {String} bit1 一个二进制位， 0 || 1 * @param {String} bit2 二进制位 * @param {Number | String} extra 上一次相加的进位 * @return {[Number,Number]} [unit,extra] : unit 是相加后的个位，extra 是进位*/</span><span class="token keyword">function</span> <span class="token function">byteSum</span><span class="token punctuation">(</span>bit1<span class="token punctuation">,</span> bit2<span class="token punctuation">,</span> extra<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>bit1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>bit2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>long<span class="token punctuation">,</span> short<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">></span> b<span class="token punctuation">.</span>length    <span class="token operator">?</span> <span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">:</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码是用来得到输入字符串 <code>a,b</code>中的较长、较短的字符串，然后转换成数组并将数组反转，反转是为了从低位开始处理（也可以直接不反转，但是也得从低位开始计算）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> unit<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> long<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>unit<span class="token punctuation">,</span> extra<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byteSum</span><span class="token punctuation">(</span>long<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">>=</span> short<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> short<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> extra<span class="token punctuation">)</span>    target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码是遍历两个字符串，然后按位相加得到二进制结果的个位和进位，个位直接存入到数组最开头（高位）</p><pre class="line-numbers language-js"><code class="language-js">extra <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码是用来判断最高位运算后是否也有进位的</p><p>最后把数组转换成字符串返回得到结果</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时： 76ms 63.04%<br>内存： 36.5MB 11.11%</p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>上面的第一中解法写得有一些臃肿，后来仔细想一下，其实在把字符串转换成数组后，不需要反转了，直接调用 <code>pop</code>就可以， <code>pop</code>方法会弹出最后一个元素并返回，因此只需要判断 a 和 b 的长度是否减到0就可以知道数组是否空了</p><p>同时，上面采用一个数组来存运算结果的每一个位，也可以替换成用一个字符串。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">||</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span>        target <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> target<span class="token punctuation">;</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>extra <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> extra <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-1"><a href="#效率-1" class="headerlink" title="效率"></a>效率</h3><p>耗时： 64ms 95.46%;<br>内存： 35.5MB 11.11%；</p><h2 id="解法3-BigInt"><a href="#解法3-BigInt" class="headerlink" title="解法3 BigInt"></a>解法3 <code>BigInt</code></h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>上面两个方法内存消耗都是比较大，但是我也没想到还有啥方法可以优化，然后翻了一下别人提交的记录内存消耗最小的解法<br>emmmmmm，和我最开始的提交没有通过的版本思路基本是一样，但是做了数据超出范围时候的处理</p><p><strong>我好像也还是第一次知道JavaScript里面有<code>BigInt</code>这个东西的，只知道Java里有这种</strong></p><p>好了，涨知识了，看来还是基本功不牢哇…</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> numA    <span class="token keyword">let</span> numB    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">53</span> <span class="token operator">||</span> b<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        numA <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0b"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>        numB <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0b"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        numA <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        numB <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>numA <span class="token operator">+</span> numB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[MDN-BigInt] (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt</a>)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">MDN-parseInt</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 反转字符串中的单词</title>
      <link href="/leetcode/string/reversewords/readme/"/>
      <url>/leetcode/string/reversewords/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/submissions/" target="_blank" rel="noopener">Leetcode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/reverseWords" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt=""><br><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/reverseWords/problem.png" alt=""></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个题目也不是很难，起码思路还是很容易就可以想到了的。</p><p>题目要求只是把字符串中的单词的顺序反转过来，而不需要把单词中的每一个字母也反转，所以只需要先把字符串的每一个单词都拆分出来得到一个数组，然后调用数组的 <code>reverse</code>方法把数组反转一下，然后在重新变成一个字符串就OK了</p><p>这里需要注意的一个坑是，原来的字符串中一个单词可能有很多个空格字符分隔，但是反转后的单词都只能用一个空格分隔，所以需要做一下处理。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {string} */</span><span class="token keyword">var</span> reverseWords <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token operator">!</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>s.trim()</code> 用来先对字符串首尾的空格做一下处理，然后调用 <code>split</code>方法用空格作为分隔符把字符串拆开得到一个单词数组， <code>reverse</code> 方法用来反转数组， <code>filter</code>方法用来把数组里的空字符去掉</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：60ms 92.22$<br>内存： 34.6MB 100%</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#中等题 </tag>
            
            <tag> String#中等题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 最后一个单词的长度</title>
      <link href="/leetcode/string/lengthoflastword/readme/"/>
      <url>/leetcode/string/lengthoflastword/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/length-of-last-word/" target="_blank" rel="noopener">Leetcode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/lengthOfLastWord" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/lengthOfLastWord/problem.png" alt=""></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>emmm 这是写了这么多题的最简单的一道题了 … ，思路很简单，既然说了是只包含 <strong>大小写字母和空格</strong> ，那直接就可以调用 <code>String.prototype.split</code> 方法，以空格作为分隔符号来把每个单词分隔开，然后 <code>pop</code>得到最后一个单词，返回其长度即可。</p><p>这里要注意一点的是应该要对字符串先进行 <code>trim</code> 去除收尾空格，否则如果字符串结尾是个空格符的话，<code>pop</code>出来的就是空字符串</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> lengthOfLastWord <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：56ms 93.94%<br>内存： 33.7MB 70%</p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 外观数列</title>
      <link href="/leetcode/string/descriptionarr/readme/"/>
      <url>/leetcode/string/descriptionarr/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/count-and-say/" target="_blank" rel="noopener">LeetCode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/DescriptionArr" target="_blank" rel="noopener">Github-链接</a></p><p><img src="./problem.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/DescriptionArr/problem.png" alt=""></p><h2 id="解法1-正则表达式解法"><a href="#解法1-正则表达式解法" class="headerlink" title="解法1 正则表达式解法"></a>解法1 正则表达式解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h4><p>首先需要先理解一下题目中描述的 <strong>外观数列</strong> 到底是什么意思以及有什么规律</p><pre><code>1.     12.     113.     214.     12115.     1112211 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</code></pre><p>从上面的描述我们可以知道这个 <strong>外观数列</strong> 的大概意思</p><ul><li>数列的第n项中的结果是由其前一项的表达式所决定的，第n项中表达式中的数字序列应该是 <strong>每两个</strong>作为一组 <code>描述组合</code> $a_1 a_2$,表示其前一项中对应位置是 $a_1$个$a_2$</li><li>例如第五项$A_5$ 是 <code>111221</code>，两两分成一组为 11, 12, 21,其中 11表示第四项 $A_4$最前面是 1个1，即 ‘1’,而 12 表示 $A_4$ 中在前面的 ‘1’ 后面是 1个2,即 ‘12’,后面 21则表示有2个1,因此得到 $A_4$应该是 ‘1211’</li><li>同样如果第五项$A_5$是<code>111221</code>的话，则可以得到第六项 $A_6$应该是 312211</li></ul><p>从上面的理解我们也可以得到一些规律</p><ul><li>数列中的每一项中数字的个数一定是 <strong>2的倍数</strong>,即 $2N$，因为<strong>每一项都是对前一项的描述</strong>，而每一组描述都需要两个字符来完成，所以最终的总字符一定是偶数个</li><li>如果第n项 $A_n$ 的数字序列是 $a_1a_2a_3…a_m$, 共m个数字，其中不重复的有k个（k是不重复的数字个数，如 111122中数字一共有6个，其中不重复数字是1,2一共2个），要表示前一项的 <code>k</code>个不重复数字,至少需要 $2k$个。</li></ul><p>最重要的两个结论是</p><ul><li>根据外观数列的定义可以知道，<strong>每一项都是对前一项的描述</strong>，那可以断定的是，如果数列第n项是 $A_n=a_1a_2a_3a_4a_5a_6…a_{n-1}a_n$，则可以知道前一项 $A_{n-1}$ 是由 $a_2a_4a_6…a_n$ 组成的，因此$a_2\neq a_4$, $a_4\neq a_6$,依次往下，否则就会被合并成同一个组合。例如 <code>111**3**21131221</code> 中偶数位置数字序列 分别是 1,3,1,3,2,1 相邻的两个一定不相等，否则如果是 <code>111**1**21131221</code>，则前面四个数 <code>1111</code>表示前一项对应的两个数字就是 <code>11</code>，而又由<code>描述组合</code>的规则来看，要表示这两个数，下一项应该要用 <code>21</code> 来表示，而不是 <code>1111</code>，所以就会矛盾，所以可知每一项的数字序列中，最多会连续出现相同的数字的数目是3个，不会有连续四个数字相同</li><li>有上面的规律可以进一步推论出一个更重要的结论：任何一项的数字序列中，<strong>一定只由 <code>1,2,3</code> 三个字符中的若干个组成，而不会出现其他数字</strong>，不会出现 4,5,6,…。</li></ul><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>在得出上面两个重要结论之后，可以想到，既然数字序列中最多只可能出现 1,2,3 三个数字的组合，那便可以是一个正则表达式去匹配连续出现的 1, 2, 3 的序列，然后得出这段序列的长度，进而得出下一项的 <code>描述组合</code>，也就可以得到任一项的数字序列了。</p><p>题目要求的是输入一个 <strong>项数n</strong>,输入对应的 <strong>第n项的数字序列</strong>，这里的话可以从第一项开始往后一直递推到第n项。</p><p>好了，扯了这么多，终于要到怎么去用代码解决这个问题的时候了</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {string} */</span><span class="token keyword">var</span> countAndSay <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(1+)|(2+)|(3+)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            next <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> current<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的主要部分就是在这个 <code>for</code>循环，循环主要是用来控制递推的阶数，循环体内的 正则表达式部分便是用来 从上一项递推到出下一项的结果</p><pre class="line-numbers language-js"><code class="language-js">current<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(1+)|(2+)|(3+)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    next <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的正则表达式 <code>/(1+)|(2+)|(3+)/g</code>，用来检测连续出现的 1,2,3</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时： 76ms 38.4%<br>内存： 36.5MB 50%</p><h2 id="神奇的解法"><a href="#神奇的解法" class="headerlink" title="神奇的解法"></a>神奇的解法</h2><p>正当我苦苦思索一种不需要递推而直接得到项数n与其数字序列$A_n$之间的关系的方法，但却百思不得其解的时候，我看到了题解上的一种神奇的方法让我心生敬佩……</p><p><a href="https://leetcode-cn.com/problems/count-and-say/solution/da-biao-ju-ran-4ms-by-ninjayahoo/" target="_blank" rel="noopener">链接</a></p><p><strong>果然啊，还是有人做了我一直想做却不敢做的事情</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string arr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">,</span><span class="token string">"21"</span><span class="token punctuation">,</span><span class="token string">"1211"</span><span class="token punctuation">,</span><span class="token string">"111221"</span><span class="token punctuation">,</span><span class="token string">"312211"</span><span class="token punctuation">,</span><span class="token string">"13112221"</span><span class="token punctuation">,</span><span class="token string">"1113213211"</span><span class="token punctuation">,</span><span class="token string">"31131211131221"</span><span class="token punctuation">,</span><span class="token string">"13211311123113112211"</span><span class="token punctuation">,</span><span class="token string">"11131221133112132113212221"</span><span class="token punctuation">,</span><span class="token string">"3113112221232112111312211312113211"</span><span class="token punctuation">,</span><span class="token string">"1321132132111213122112311311222113111221131221"</span><span class="token punctuation">,</span><span class="token string">"11131221131211131231121113112221121321132132211331222113112211"</span><span class="token punctuation">,</span><span class="token string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span><span class="token punctuation">,</span><span class="token string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span><span class="token punctuation">,</span><span class="token string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span><span class="token punctuation">,</span><span class="token string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span><span class="token punctuation">,</span><span class="token string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span><span class="token punctuation">,</span><span class="token string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span><span class="token punctuation">,</span><span class="token string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">,</span><span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span><span class="token punctuation">,</span><span class="token string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">,</span><span class="token string">"1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123211211131211121311121321123113111231131122112213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122113221122112133221121113122113121113222123211211131211121311121321123113213221121113122113121113222113221113122113121113222112132113213221232112111312111213322112311311222113111221221113122112132113121113222112311311222113111221132221231221132221222112112322211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322111213122112311311123112112322211213211321322113312211223113112221121113122113111231133221121321132132211331121321232221123123211231132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112211322212322211231131122211322111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有下面这个还要再来个 <code>switch case</code>  的解法，也是让我虎躯一震 …</p><p><a href="https://leetcode-cn.com/problems/count-and-say/solution/zui-kuai-dai-ma-100wu-di-by-ni-wu-shui-liao-ma-15/" target="_blank" rel="noopener">链接</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"21"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"111221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"312211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"13112221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1113213211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"31131211131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"13211311123113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221133112132113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"3113112221232112111312211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">13</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1321132132111213122112311311222113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">14</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221131211131231121113112221121321132132211331222113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">15</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">17</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">18</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">19</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">20</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">21</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">23</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">24</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213213211221113122113121113222112132113213221232112111312111213322112132113213221133112132123123112111311222112132113311213211221121332211231131122211311123113321112131221123113112221132231131122211211131221131112311332211213211321223112111311222112132113212221132221222112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211132221121311121312211213211312111322211213211321322113311213212322211231131122211311123113321112131221123113112211121312211213211321222113222112132113223113112221121113122113121113123112112322111213211322211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">25</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">26</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">27</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">28</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">29</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">30</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然了，惊讶归惊讶，我还是更愿意相信这几个解法的作者，其实已经用了其他方法来解决了的，上面的枚举法或许只是一个小玩笑。</p><p>又或者，真有神人手算出结果还算对了的话，我是真佩服了…</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode#String </category>
          
          <category> 刷题#Javascript </category>
          
          <category> Javascript#String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 有效括号</title>
      <link href="/leetcode/string/validbracket/readme/"/>
      <url>/leetcode/string/validbracket/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">LeetCode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/validBracket" target="_blank" rel="noopener">Github-链接</a></p><p><img src="./problem.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/validBracket/problem.png" alt=""></p><h2 id="解法1-数组模拟堆栈-64ms-33-7MB"><a href="#解法1-数组模拟堆栈-64ms-33-7MB" class="headerlink" title="解法1 数组模拟堆栈 64ms 33.7MB"></a>解法1 数组模拟堆栈 64ms 33.7MB</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">']'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> bracketMap <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">:</span> <span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">:</span> <span class="token string">'{'</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> bracketMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> bracketMap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解法2的思路其实和解法1几乎完全一致，就是用一个<code>Object</code>来代替了 <code>switch case</code> ，解法2的写法比解法1要优雅一些，但是执行效率比解法1要低一些。<br><strong>果然还是鱼和熊掌不可兼得，唯独丑和单身可以啊</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 在字符串中查找字串</title>
      <link href="/leetcode/string/strstr/readme/"/>
      <url>/leetcode/string/strstr/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">Leetcode-题目链接</a></p><p><img src="./problem.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/strStr/problem.png" alt=""></p><h2 id="作弊解法-ES6-String-prototype-indexOf"><a href="#作弊解法-ES6-String-prototype-indexOf" class="headerlink" title="作弊解法 ES6 String.prototype.indexOf"></a>作弊解法 ES6 String.prototype.indexOf</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> haystack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：74ms<br>内存：33.5MB , 非常意外的超过了 <code>100%</code> 的 <code>JS</code>记录，哈哈哈哈哈笑死了</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这还有啥好说的啊… 看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">官方文档</a> 就好了</p><h2 id="解法2-双重for循环实现indexOf"><a href="#解法2-双重for循环实现indexOf" class="headerlink" title="解法2 双重for循环实现indexOf"></a>解法2 双重for循环实现indexOf</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subStr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!==</span> subStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-1"><a href="#效率-1" class="headerlink" title="效率"></a>效率</h3><p>耗时：<code>64ms</code> 65%<br>内存：<code>34.9MB</code>  62.47%</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一层的for循环是用来找出源字符串<code>src</code>和字串<code>subStr</code>相同的首字符的索引<code>i</code>的，找出后再去看源字符串中 <code>i</code>后面与字串相同的一段字串是否与要找的字串<code>subStr</code>相同<br>如果相同则说明所要找的索引就是 <code>i</code>，否则就继续往后找</p><h2 id="解法3-用String-prototype-slice代替for循环"><a href="#解法3-用String-prototype-slice代替for循环" class="headerlink" title="解法3 用String.prototype.slice代替for循环"></a>解法3 用String.prototype.slice代替for循环</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subStr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>subStr <span class="token operator">===</span> src<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-2"><a href="#效率-2" class="headerlink" title="效率"></a>效率</h3><p>耗时：<code>56ms</code> 95.9%<br>内存：<code>33.8MB</code>  92.47%</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subStr <span class="token operator">===</span> src<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的第二种解法是用了两重for循环一个一个的比较两个字符串的字符是否相等，完全用了很底层的写法，可以完全兼容，但是实际也不需要这样写。<br>第二层 <code>for循环</code> 是在找出 <code>src</code>和 <code>subStr</code> 相同的首字符后再看 <code>src</code>后面与 <code>subStr</code> 长度相同的一段与 <code>subStr</code> 是否相同，而这个可以使用<br><code>slice</code>方法来对 <code>src</code> 切分得到指定索引区间的字串，直接把<code>subStr</code>和切分下来的整段字串进行比较就可以</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="">String.prototype.slice</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 最长公前缀</title>
      <link href="/leetcode/string/longestcommonprefix/readme/"/>
      <url>/leetcode/string/longestcommonprefix/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">Leetcode-题目链接</a></p><h2 id="解法1-68ms-36-7MB"><a href="#解法1-68ms-36-7MB" class="headerlink" title="解法1 68ms 36.7MB"></a>解法1 68ms 36.7MB</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** *  * @param {String} str1  * @param {String} str2  * @returns {String} */</span><span class="token keyword">function</span> <span class="token function">getCommonPrefix</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        prefix <span class="token operator">+</span><span class="token operator">=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string[]} strs * @return {string} */</span><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> strs <span class="token operator">&amp;&amp;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefix<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        prefix <span class="token operator">=</span> <span class="token function">getCommonPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解法2-56ms-33-9MB"><a href="#解法2-56ms-33-9MB" class="headerlink" title="解法2 56ms 33.9MB"></a>解法2 56ms 33.9MB</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string[]} strs * @return {string} */</span><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>prefix<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>上面解法1的弊端在于需要调用外部函数，因此会消耗较多的内存，因此要优化内存的话，应该想办法把外部函数调用的地方用内置函数来替代。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>prefix<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这个 <code>while</code> 循环中通过判断 <code>strs[i].indexOf(prefix) !=0</code>来进行前缀检索。应该清楚的是，这个语句得到 <code>0</code> 的情况有两种</p><ul><li>一是 <code>strs[i]</code> 中包含了 <code>prefix</code>字串，且开始的索引是 <code>0</code>，也即字符串开头，这种情况就是得到的前一个字符串和当前字符串的最长公共前缀，则此时跳出 <code>while</code> 循环，再对下一个字符串进行相同处理</li></ul><ul><li>另一个则是在 <code>prefix</code> 是空字符串的时候，<code>strs[i].indexOf(prefix)</code> 也会得到0，这种情况说明两个字符串没有共同前缀，此时整个函数都可以直接 <code>return</code>一个空字符串了</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">String.prototype.indexOf</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode#刷题 </tag>
            
            <tag> Leetcode#简单题 </tag>
            
            <tag> String#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 罗马数字转换成整数</title>
      <link href="/leetcode/string/roman2int/readme/"/>
      <url>/leetcode/string/roman2int/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">Leetcode-题目链接</a></p><h2 id="正则表达式解法"><a href="#正则表达式解法" class="headerlink" title="正则表达式解法"></a>正则表达式解法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> seperator <span class="token operator">=</span> <span class="token string">'-'</span><span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IV'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IX'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XL'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XC'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">90</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CD'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CM'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">900</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> normalString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        total <span class="token operator">+</span><span class="token operator">=</span> __charMap<span class="token punctuation">[</span>m<span class="token punctuation">]</span>        <span class="token keyword">return</span> seperator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> normalString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>seperator<span class="token punctuation">,</span> <span class="token string">'ig'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token keyword">return</span> sum <span class="token operator">+</span> __charMap<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"MCMXCIV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个解法的思路是想到直接把输入的字符串拆开成每一个单个字符，然后映射到对应的整数，然后做个累加。但是因为有六个数字是由两个字符组合来表示的，所以需要先把这些特殊数字找出来先处理掉，留下的都是可以直接单个映射的字符，就可以直接拆开相加了。</p><p>下面的代码部分就是用来匹配六个特殊数字的，匹配到之后对其进行映射、累加，然后把字符串换成一个分隔符 <code>-</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> normalString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    total <span class="token operator">+</span><span class="token operator">=</span> __charMap<span class="token punctuation">[</span>m<span class="token punctuation">]</span>    <span class="token keyword">return</span> seperator<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的部分则是对已经处理掉六个特殊字符的字符串直接拆开成单个字符进行映射累加得到结果了。调用的是数组的 <code>reduce</code> 方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> target <span class="token operator">=</span> normalString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>seperator<span class="token punctuation">,</span> <span class="token string">'ig'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum <span class="token operator">+</span> __charMap<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>开始写的解法是用来一个对象来做罗马数字和整数的映射,但是发现这样的写法效率会比 <code>switch case</code>要低一些，所以换成了一个 <code>switch case</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> __charMap <span class="token operator">=</span> <span class="token punctuation">{</span>    I<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    V<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    X<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    L<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    C<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    D<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    M<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    IV<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    IX<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>    XL<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    XC<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>    CD<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    CM<span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式解法2"><a href="#正则表达式解法2" class="headerlink" title="正则表达式解法2"></a>正则表达式解法2</h2><p>上面解法写完之后发现执行起来效率很低，因为存在着大量的正则匹配。后面发现其实可以直接把两个正则表达式合并在一起只处理一次就可以完成全部映射</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IV'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IX'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XL'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XC'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">90</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CD'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CM'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">900</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)|([IVXLCDM])/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        total <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为罗马字符串一定是大的数字在小的数字的左边的，而字符串在匹配时候也是按照 <strong>从左到右</strong>的顺序进行检索，正则表达式匹配检测时候也按照 <strong>从左到右</strong>来检测，因此如果前面的分组匹配成功，就马上执行回调函数，然后只需要在回调函数里处理对应字符，然后匹配到的字符删去就可以</p><p>合并后的正则，六个特殊数字需要放在普通单个字符的前面</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)|([IVXLCDM])/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    total <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组遍历解法"><a href="#数组遍历解法" class="headerlink" title="数组遍历解法"></a>数组遍历解法</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">let</span> dic <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> last <span class="token operator">=</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cur <span class="token operator">=</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> last        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sum <span class="token operator">-</span><span class="token operator">=</span> last        <span class="token punctuation">}</span>        last <span class="token operator">=</span> cur    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum <span class="token operator">+</span> last<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">RegExp-正则表达式</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">String.prototype.replace</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode#String </category>
          
          <category> 刷题#Javascript </category>
          
          <category> Javascript#String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode#简单题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/personal-resume/"/>
      <url>/personal-resume/</url>
      
        <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>姓名：廖文江</li><li>性别：男</li><li>学校：华中师范大学 本科大三</li><li>专业：通信工程专业</li><li>兴趣爱好：听歌、跑步、打篮球</li><li>Email：<a href="mailto:fireworksman@163.com">fireworksman@163.com</a></li><li>个人博客：<a href="http://blog.wenjiang.info">http://blog.wenjiang.info</a></li><li>Github：<a href="https://github.com/WenJiang99" target="_blank" rel="noopener">WenJiang99</a></li></ul><h2 id="主要技能"><a href="#主要技能" class="headerlink" title="主要技能"></a>主要技能</h2><p><code>Javascript</code> , <code>Typescript</code> , <code>CSS</code> , <code>HTML</code> , <code>React</code> , <code>Taro</code> , <code>NodeJs</code> , <code>Koa</code> , <code>EggJs</code> , <code>Webpack</code>, <code>Mysql</code> , <code>MongoDB</code></p><h2 id="主要课程"><a href="#主要课程" class="headerlink" title="主要课程"></a>主要课程</h2><ul><li>《模拟电子技术》</li><li>《数字电子技术》</li><li>《数据结构》</li><li>《操作系统》</li><li>《计算机网络》</li><li>《数据库原理与应用》</li></ul><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><h3 id="2019-07-04-–-2019-08-31-大二暑假"><a href="#2019-07-04-–-2019-08-31-大二暑假" class="headerlink" title="2019.07.04 – 2019.08-31 (大二暑假)"></a>2019.07.04 – 2019.08-31 (大二暑假)</h3><ul><li>公司：武汉金山WPS</li><li>部门：商业化产品研发(前端开发)</li><li>工作：主要从事于 <strong>小程序</strong> 开发，使用的是<strong>Taro</strong>框架，主要技术栈是 <code>React</code> + <code>Less</code> + <code>Typescript</code></li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><h3 id="2019-10-30-–-2019-11-15-大三上"><a href="#2019-10-30-–-2019-11-15-大三上" class="headerlink" title="2019.10.30 – 2019.11.15 (大三上)"></a>2019.10.30 – 2019.11.15 (大三上)</h3><ul><li>项目名称：新媒体大赛项目（校级）</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/new-media-re" target="_blank" rel="noopener">new-media-re</a></li><li>项目简介：基于 <code>React</code> + <code>React-Router</code> + <code>Antd</code> 的静态页面项目</li></ul><h3 id="2019-11-30-–-2019-12-08-大三上"><a href="#2019-11-30-–-2019-12-08-大三上" class="headerlink" title="2019.11.30 – 2019.12.08 (大三上)"></a>2019.11.30 – 2019.12.08 (大三上)</h3><ul><li>项目名称：文创比赛项目（省级）</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/cultural-creation-re" target="_blank" rel="noopener">cultural-creation</a></li><li>项目简介：基于 <code>React</code> + <code>React-Router</code> + <code>Antd</code> 的静态页面项目</li></ul><h3 id="2020-01-14-–-2020-04-10-（大三寒假）"><a href="#2020-01-14-–-2020-04-10-（大三寒假）" class="headerlink" title="2020.01.14 – 2020.04.10 （大三寒假）"></a>2020.01.14 – 2020.04.10 （大三寒假）</h3><ul><li>项目名称：一个类似于课程管理平台的前端项目之一</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/courses-teacher" target="_blank" rel="noopener">courses-teacher</a></li><li>项目简介：一个基于 <code>Typescript</code>+ <code>React</code>+<code>React-Router</code> +<code>Redux</code> + <code>webpack</code> + <code>Antd</code> + <code>docker</code> 的H5移动端项目</li></ul><h3 id="2020-01-14-–2020-04-10-大三寒假"><a href="#2020-01-14-–2020-04-10-大三寒假" class="headerlink" title="2020.01.14 –2020.04.10 (大三寒假)"></a>2020.01.14 –2020.04.10 (大三寒假)</h3><ul><li>项目名称：一个类似于课程管理平台的后端服务器</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/courses-server" target="_blank" rel="noopener">courses-server</a></li><li>项目简介：一个基于 <code>Koa</code> + <code>Typescript</code> + <code>mongoose</code> + <code>docker</code> 的 Node服务器</li></ul><h2 id="荣誉-amp-证书"><a href="#荣誉-amp-证书" class="headerlink" title="荣誉&amp;证书"></a>荣誉&amp;证书</h2><ul><li>英语四级证书</li><li>英语六级证书</li><li>计算机二级(python)</li><li>实习证明（前端开发）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
            <tag> 信息 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
