<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode-链表题目合集</title>
      <link href="/leetcode-linkedlist/"/>
      <url>/leetcode-linkedlist/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="【21】合并两个有序链表"><a href="#【21】合并两个有序链表" class="headerlink" title="【21】合并两个有序链表"></a>【21】合并两个有序链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="./21.png" alt=""></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>先新建一个链表，得到头结点指针和当前指针<code>current</code>，最开始<code>current</code>指向的是头结点。</p><p>对两个链表进行遍历，当有其中一个遍历完之后就退出循环。</p><p>每次遍历对两个节点进行比较，将值小的节点添加到结果中，即<code>current.next  = Math.min(l1,l2)</code>，然后，小的节点对应的链表往后移动一个节点，大的节点对应的链表不动</p><p>同时<code>current</code>指针后移，即<code>current = current.next</code></p><p>循环退出后，只需要将剩余的链表的节点直接添加到新的链表中即可得到最终的结果</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> link1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> link2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>link1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> link2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>link1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> link2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> link1<span class="token punctuation">;</span>            link1 <span class="token operator">=</span> link1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> link2<span class="token punctuation">;</span>            link2 <span class="token operator">=</span> link2<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>link1<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> link1<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>link2<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> link2<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【23】合并K个升序链表"><a href="#【23】合并K个升序链表" class="headerlink" title="【23】合并K个升序链表"></a>【23】合并K个升序链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./23.png" alt=""></p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>通过迭代，取相邻的两个链表合并，得到一个新的合并后的链表，然后用这一个新的链表去和下一个链表来合并，直到所有的链表合并完，得到最终的一个合并链表</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode[]} lists * @return {ListNode} */</span><span class="token keyword">var</span> mergeKLists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> targetList <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        targetList <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>targetList<span class="token punctuation">,</span> lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> targetList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并两个升序链表</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> l1 <span class="token operator">=</span> list1<span class="token punctuation">;</span>    <span class="token keyword">let</span> l2 <span class="token operator">=</span> list2<span class="token punctuation">;</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-08】环路检测"><a href="#【面试题02-08】环路检测" class="headerlink" title="【面试题02.08】环路检测"></a>【面试题02.08】环路检测</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="./detectCycle.png" alt=""></p><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p>先通过一个快指针<code>fast</code>和一个慢指针<code>slow</code>对链表进行遍历，快指针每次前进两个节点，慢指针每次前进一个节点</p><p>如果链表没有环，则快指针很快会遍历完，并且此时<code>fast !== slow</code>，因此可以直接返回 <code>null</code></p><p>如果链表有环，则快指针和慢指针迟早会在某一个节点相遇，此时可以跳出遍历的循环。</p><p>判断出了有环后，还需要找出环的入口节点。</p><p>此时让快指针重新指向头结点<code>fast = head</code>（或者新建一个都一样，目的是要有一个指针从头结点开始遍历），慢指针依旧停在相遇的节点位置，然后头指针<code>fast</code>和慢指针<code>slow</code>都以相同的速度每次移动一个节点</p><p>根据数学推导可以知道，头指针<code>fast</code>和慢指针<code>slow</code>第一次相遇的位置恰好就是环的入口节点。</p><p>关于为什么恰好在环的入口相遇，可以查看Leetcode上题解中一个<a href="https://leetcode-cn.com/problems/linked-list-cycle-lcci/solution/kuai-man-zhi-zhen-zheng-ming-bi-jiao-yan-jin-by-ch/" target="_blank" rel="noopener">推导过程</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> detectCycle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fast<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【142】环形链表"><a href="#【142】环形链表" class="headerlink" title="【142】环形链表||"></a>【142】环形链表||</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">题目链接-142.环形链表||</a></p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/submissions/" target="_blank" rel="noopener">题目链接-141.环形链表</a></p><p><img src="./142.png" alt=""></p><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> detectCycle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【328】奇偶链表"><a href="#【328】奇偶链表" class="headerlink" title="【328】奇偶链表"></a>【328】奇偶链表</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="./328.png" alt=""></p><h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><p>用一个指针存储偶链表，对链表进行遍历，每次将奇节点的后一个节点添加到偶链表后面，然后在原链表中删掉这个节点 <code>odd.next=odd.next.next</code>，然后奇链表（原链表）遍历指针后移</p><p>最后循环完后，将偶链表接到奇链表后面即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> oddEvenList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> oddHead <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> odd <span class="token operator">=</span> oddHead<span class="token punctuation">;</span>    <span class="token keyword">let</span> evenHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> even <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>odd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        even <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>even <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    odd <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>odd<span class="token punctuation">.</span>next <span class="token operator">=</span> evenHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> oddHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【430】扁平化多级链表"><a href="#【430】扁平化多级链表" class="headerlink" title="【430】扁平化多级链表"></a>【430】扁平化多级链表</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>具体描述可以查看<a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/" target="_blank" rel="noopener">LeetCode官网</a></p><h3 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h3><p>解决问题的关键是将双向链表旋转九十度，看成是一颗二叉树，节点的<code>child</code>子链表指针就相当于是树中节点的左指针，节点的<code>next</code>指针相当于是树中节点的右指针</p><p>然后通过对树进行前序遍历（深度优先遍历）的顺序，就是扁平化后的结果。</p><p>在实现的时候，通过深度优先的思想，通过一个<code>current</code>指针，从头结点开始开始遍历，将<code>current</code>节点的子链表<code>current.child</code>进行扁平化，然后返回扁平化后的链表的尾节点，与<code>current</code>节点的下一个节点<code>current.next</code>进行连接</p><p>具体的解法描述可以查看<a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/solution/bian-ping-hua-duo-ji-shuang-xiang-lian-biao-by-lee/" target="_blank" rel="noopener">LeetCode官方题解</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * // Definition for a Node. * function Node(val,prev,next,child) { *    this.val = val; *    this.prev = prev; *    this.next = next; *    this.child = child; * }; */</span><span class="token comment" spellcheck="true">/** * @param {Node} head * @return {Node} */</span><span class="token keyword">var</span> flatten <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flattenDFS</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flattenDFS</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">const</span> tail <span class="token operator">=</span> <span class="token function">flattenDFS</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> current<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">flattenDFS</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-02】返回倒数第K个节点"><a href="#【面试题02-02】返回倒数第K个节点" class="headerlink" title="【面试题02.02】返回倒数第K个节点"></a>【面试题02.02】返回倒数第K个节点</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./interview.02.02.png" alt=""></p><h3 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h3><h4 id="方法1-数组存储"><a href="#方法1-数组存储" class="headerlink" title="方法1 数组存储"></a>方法1 数组存储</h4><p>通过一个数组来存放每个节点的值，然后一直是遍历链表，直到链表遍历结束</p><p>然后返回<code>arr[arr.length - k]</code>就可以得到倒数第K个节点</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {number} */</span><span class="token keyword">var</span> kthToLast <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)，</p><p>空间复杂度：O(n)</p><h4 id="解法2-双指针"><a href="#解法2-双指针" class="headerlink" title="解法2 双指针"></a>解法2 双指针</h4><p>通过两个指针<code>fast</code>和<code>slow</code>进行遍历，先让<code>fast</code>指针往后遍历k个节点，然后<code>fast</code>和<code>slow</code>再同时往后遍历，相当于是用<code>slow</code>指针将<code>fast</code>指针前面相隔<code>k</code>个节点的节点存储下来</p><p>当<code>fast</code>节点遍历到链表末尾的时候，<code>slow</code>节点正好指向了倒数第K个节点的位置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {number} */</span><span class="token keyword">var</span> kthToLast <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="【19】删除链表的倒数第N个节点"><a href="#【19】删除链表的倒数第N个节点" class="headerlink" title="【19】删除链表的倒数第N个节点"></a>【19】删除链表的倒数第N个节点</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">题目链接-19.删除链表的倒数第N个节点</a></p><p><img src="./19.png" alt=""></p><h3 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h3><p>先通过双指针法找到倒数第N个节点，然后将节点删除即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">var</span> removeNthFromEnd <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里如果题目没有说n一定是有效的话，就还需要考虑fast === null 的情况</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【876】链表的中间节点"><a href="#【876】链表的中间节点" class="headerlink" title="【876】链表的中间节点"></a>【876】链表的中间节点</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./876.png" alt=""></p><h3 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h3><p>通过两个指针，一个快指针<code>fast</code>，一个慢指针<code>slow</code>，两个指针同时从链表头结点开始遍历。</p><p>快指针每次向后移动两个节点，慢指针每次向后移动一个节点，当快指针到达链表末尾的时候，慢指针就恰好在链表的中间位置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> middleNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><p>如果不要求空间复杂度为O(1)的话，还可以使用一个O(n)的空间复杂度的解法，将链表遍历依次，用数组将每个节点存储下来，然后根据数组的长度直接确定中间节点的索引位置</p><h2 id="【61】旋转链表"><a href="#【61】旋转链表" class="headerlink" title="【61】旋转链表"></a>【61】旋转链表</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/rotate-list/submissions/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./61.png" alt=""></p><h3 id="解法-9"><a href="#解法-9" class="headerlink" title="解法"></a>解法</h3><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><p>将一个链表的每个节点都向后移动K个位置，实际上就是将链表最后的K个节点形成的子链表，移动到链表的开头位置</p><p>例如示例中</p><pre><code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</code></pre><p>实际就是将后面的两个节点<code>4-&gt;5</code>，移动到链表的开头位置，变成</p><pre><code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code></pre><p>因此，可以通过两个指针<code>fast</code>和<code>slow</code>，首先先让<code>fast</code>指针往前移动<code>k</code>个节点，然后再让<code>fast</code>和<code>slow</code>一起同时往后移动，这样当<code>fast</code>指针刚好遍历到链表末尾的时候，<code>slow</code>指针就正好停在了倒数第K个节点的位置，然后只需要将<code>slow</code>节点后面的子链表作为原本链表的开头即可</p><p>上面的分析是基于<code>k &lt; n</code>的情况的，也即移动的位置是小于节点的个数的。当<code>k&gt;=n</code>的时候，需要让链表可以重新回到头结点，重新开始遍历，因此<code>fast</code>指针 先走K个位置，应该按照下面的代码来执行</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next <span class="token operator">||</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时还应该考虑到，既然K可能大于n，则<code>fast</code>指针在先走了<code>k</code>个节点之后，其与<code>slow</code>指针之间的位置关系就有两种情况</p><p>第一种就是正常情况，<code>fast</code>指针在<code>slow</code>指针前面。这种情况下，只需要按照上面的分析过程，在<code>fast</code>移动到链表末尾后，将<code>slow</code>指向的节点作为新的头结点。这里还要注意，将<code>slow</code>后面的节点形成的子链表移动到原本链表开头的时候，要讲前一个链表的连接断开，否则链表会形成一个环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> prevHead <span class="token operator">=</span> head<span class="token punctuation">;</span>head <span class="token operator">=</span> slow<span class="token punctuation">;</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> prevHead<span class="token punctuation">;</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">return</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种情况是<code>fast</code>指针恰好停留在了<code>slow</code>指针所在的位置，也即头结点，这是因为<code>k % n === 0</code>的情况造成的，这种情况下，就相当于链表中每个节点向后移动的位置是<code>0</code>，因此最后的结果就是原本的链表，此时直接返回原本的头结点即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {ListNode} */</span><span class="token keyword">var</span> rotateRight <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> k <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next <span class="token operator">||</span> head<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        tail <span class="token operator">=</span> fast<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> prevHead <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> slow<span class="token punctuation">;</span>    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> prevHead<span class="token punctuation">;</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="【剑指offer35】复杂链表复制"><a href="#【剑指offer35】复杂链表复制" class="headerlink" title="【剑指offer35】复杂链表复制"></a>【剑指offer35】复杂链表复制</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/" target="_blank" rel="noopener">题目链接-剑指offer35.复杂链表的复制</a></p><p><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">题目链接-138.复制带随机指针的链表</a></p><p><img src="./offer-35.png" alt=""></p><h3 id="解法-10"><a href="#解法-10" class="headerlink" title="解法"></a>解法</h3><p>先用一个<code>Map</code>将所有节点存入到其中，然后依次取出来，再连接上<code>next</code>和<code>random</code>指针即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * // Definition for a Node. * function Node(val, next, random) { *    this.val = val; *    this.next = next; *    this.random = random; * }; */</span><span class="token comment" spellcheck="true">/** * @param {Node} head * @return {Node} */</span><span class="token keyword">var</span> copyRandomList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            <span class="token keyword">const</span> random <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>random<span class="token punctuation">)</span>            next <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            random <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>random <span class="token operator">=</span> random<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-03】删除中间节点"><a href="#【面试题02-03】删除中间节点" class="headerlink" title="【面试题02.03】删除中间节点"></a>【面试题02.03】删除中间节点</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/delete-middle-node-lcci/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./interview.02.03.png" alt=""></p><h3 id="解法-11"><a href="#解法-11" class="headerlink" title="解法"></a>解法</h3><p>因为题目限定了只能访问到要删除的节点，不能访问到链表的头结点，因此没有办法按照正常的删除节点的方式，从链表头结点开始去遍历。</p><p>要删除当前的节点，同时 因为前一个节点的指针没有办法获取到，因此必须要保持原来的节点指针顺序不变，只去改变节点存储的值。</p><p>从当前要删除的节点开始向后遍历，用后一个节点的值替换当前节点上的值，节点的指针不需要改动，然后在倒数第二个节点的时候，将其的<code>next</code>指针断开，变成<code>null</code>即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>val <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【237】删除链表中的节点"><a href="#【237】删除链表中的节点" class="headerlink" title="【237】删除链表中的节点"></a>【237】删除链表中的节点</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./237.png" alt=""></p><h3 id="解法-12"><a href="#解法-12" class="headerlink" title="解法"></a>解法</h3><p>题目其实和上面的<strong>面试题02.03 删除链表的中间节点</strong>一样</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>val <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【剑指offer-18】删除链表的节点"><a href="#【剑指offer-18】删除链表的节点" class="headerlink" title="【剑指offer-18】删除链表的节点"></a>【剑指offer-18】删除链表的节点</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./offer-18.png" alt=""></p><h3 id="解法-13"><a href="#解法-13" class="headerlink" title="解法"></a>解法</h3><p>对链表进行遍历，将当前节点和前一个节点保存下来，找出要删除的指定节点后，将前一个节点的<code>next</code>指针指向当前节点的后继节点，同时将当前节点的<code>next</code>指针断开即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} val * @return {ListNode} */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【203】移除链表元素"><a href="#【203】移除链表元素" class="headerlink" title="【203】移除链表元素"></a>【203】移除链表元素</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./203.png" alt=""></p><h3 id="解法-14"><a href="#解法-14" class="headerlink" title="解法"></a>解法</h3><p>通过对链表进行遍历，如果当前节点的值和指定的值相等，则当前节点需要被删除。</p><p>在删除节点的时候，通过前一个节点的指针<code>prev</code>，将<code>prev.next = current.next</code>和<code>current.next</code>来将当前节点链表中移除</p><p>应该注意的是，因为这个题里面，要将链表中所有节点值等于指定值的节点都删除，因此在删除了前面的节点后，还需要继续向后遍历去删除其他需要删除的节点，这个时候，只需要将<code>current = next</code>来继续向后遍历即可，<code>prev</code>指针应该停留在原来的节点不动，否则对于连续多个节点都是需要删除的节点的时候，就会有一些节点被跳过。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} val * @return {ListNode} */</span><span class="token keyword">var</span> removeElements <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【206】反转链表"><a href="#【206】反转链表" class="headerlink" title="【206】反转链表"></a>【206】反转链表</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><img src="./206.png" alt=""></p><h3 id="解法-15"><a href="#解法-15" class="headerlink" title="解法"></a>解法</h3><p>通过两个指针，一个指向当前正在处理的节点<code>current</code>，一个指向前面的一个节点<code>prev</code>，从头结点开始遍历，每次将当前节点的后继节点<code>current.next</code>改成前面的一个节点<code>prev</code></p><p>因为此时会将当前节点与其原本的后继节点之间的连接断开，因此需要用一个变量<code>next</code>将下一个节点先保存下来</p><p>然后<code>prev</code>指针向后移动<code>prev = current;</code>，当前指针也向后移动<code>current = next;</code></p><p>最后遍历完之后，反转后的头结点就是<code>prev</code>指针指向的节点，因此只需要返回<code>prev</code>即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【455】两数相加"><a href="#【455】两数相加" class="headerlink" title="【455】两数相加||"></a>【455】两数相加||</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./445.png" alt=""></p><h3 id="解法-16"><a href="#解法-16" class="headerlink" title="解法"></a>解法</h3><p>因为不能将链表翻转，而加法需要从末尾开始计算，所以先将链表中的数据存储的栈中，然后再依次计算各个位上的相加，最后得到一个新的链表</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> stack2<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> v1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> extra<span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-05】链表求和"><a href="#【面试题02-05】链表求和" class="headerlink" title="【面试题02.05】链表求和"></a>【面试题02.05】链表求和</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/sum-lists-lcci/" target="_blank" rel="noopener">题目链接-面试题02.05 链表求和</a></p><p><img src="./interview.02.05.png" alt=""></p><h3 id="解法-17"><a href="#解法-17" class="headerlink" title="解法"></a>解法</h3><p>这个题因为给出的链表是反序的数字链表，因此直接按照数字相加的方式执行计算即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1 <span class="token operator">||</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">?</span> num1<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num2 <span class="token operator">?</span> num2<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num1 <span class="token operator">=</span> num1 <span class="token operator">&amp;&amp;</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num2 <span class="token operator">=</span> num2 <span class="token operator">&amp;&amp;</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1290】二进制链表转整数"><a href="#【1290】二进制链表转整数" class="headerlink" title="【1290】二进制链表转整数"></a>【1290】二进制链表转整数</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./1290.png" alt=""></p><h3 id="解法-18"><a href="#解法-18" class="headerlink" title="解法"></a>解法</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>如果不限制空间复杂度为O(1)的话，可以先用一个栈将链表中的节点都存到栈中，然后根据二进制转换成十进制的计算规则来计算最后的结果</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>如果限定了空间复杂度为O(1)，则可以先将链表翻转，然后再计算</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【24】两两交换链表中的节点"><a href="#【24】两两交换链表中的节点" class="headerlink" title="【24】两两交换链表中的节点"></a>【24】两两交换链表中的节点</h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>[题目链接]（<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/）" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs/）</a></p><p><img src="./24.png" alt=""></p><h3 id="解法-19"><a href="#解法-19" class="headerlink" title="解法"></a>解法</h3><p>两个一组进行节点交换，并且不能是简单的值交换，必须是实际节点间的指针交换。</p><p>具体的交换方法可以按照下面的示意图所示：</p><p><img src="./24-pic.png" alt=""></p><p>通过一个<code>current</code>指针来对链表进行遍历，从头结点开始，每次将当前节点的原本的下一个节点<code>prevNext</code>先保存起来，然后将当前节点的后继节点指针改为指向原本后继节点<code>prevNext</code>的后继节点，也即是<code>current.next = prevNext.next</code>，然后将原本的后继节点的后继指针改成指向当前节点，即<code>prevNext.next = current</code>，也就完成了两个节点的位置交换</p><p>同时还要考虑到，在进行当前的两个节点的交换的时候，还要将前一个节点（就是<code>next</code>指针指向了<code>current</code>的节点）的后继指针指向也修正一下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> swapPairs <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> newHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 交换之后的新的头结点</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> prevNext <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNext<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prevNext<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNext<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将前一个节点的next指针修正</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="【92】反转链表-（反转链表的某一段）"><a href="#【92】反转链表-（反转链表的某一段）" class="headerlink" title="【92】反转链表||（反转链表的某一段）"></a>【92】反转链表||（反转链表的某一段）</h2><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/" target="_blank" rel="noopener">题目链接-92.反转链表||</a></p><p><img src="./92.png" alt=""></p><h3 id="解法-20"><a href="#解法-20" class="headerlink" title="解法"></a>解法</h3><p>因为题目中要求<strong>扫描一遍</strong>完成反转，因此在对链表进行遍历的时候，先把反转区域的开始节点<code>satrt</code>和前一个节点<code>startPrev</code>找到</p><p>在往后继续遍历的时候，对于反转区域的节点，执行反转操作即可。然后到最后，找到反转区域的结尾节点为<code>end</code>，其后继节点为<code>endNext</code>，只需要将<code>startPrev</code>的后继指针指向<code>end</code>，同时<code>start</code>节点的后继指针指向<code>endNext</code>即可完成反转</p><p><img src="./92-pic.png" alt=""></p><p>考虑到如果<code>m</code>的值是<code>1</code>的时候，<code>startPrev</code>指针为空，不能正常反转，因此可以在头结点<code>head</code>前面添加一个虚拟头结点<code>headPrev</code>，当<code>m</code>的值为<code>1</code>的时候，<code>startPrev</code>指针指向<code>headPrev</code>即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} m * @param {number} n * @return {ListNode} */</span><span class="token keyword">var</span> reverseBetween <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> satrt <span class="token operator">=</span> startPrev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> headPrev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    startPrev <span class="token operator">=</span> prev <span class="token operator">||</span> headPrev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 考虑到 m = 1的情况</span>    start <span class="token operator">=</span> current<span class="token punctuation">;</span>    prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    startPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>    start<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token keyword">return</span> headPrev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【25】K个一组翻转链表"><a href="#【25】K个一组翻转链表" class="headerlink" title="【25】K个一组翻转链表"></a>【25】K个一组翻转链表</h2><h3 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">题目链接-25.K个一组翻转链表</a></p><p><img src="./25.png" alt=""></p><h3 id="解法-21"><a href="#解法-21" class="headerlink" title="解法"></a>解法</h3><p>按照前面的翻转链表某一段区域的方法，通过两个指针<code>start</code>和<code>startPrev</code>指针，分别指向当前翻转区域的开头节点和其前一个节点</p><p>然后翻转指定数量的<code>k</code>个的一组节点，翻转后将反转区域的头结点和尾节点指针指向修正一下即可</p><p>在翻转完上一组，然后进行下一组的翻转时，需要记得更新<code>startPrev</code>指针指向的节点，指向当前反转区域的头结点<code>start</code></p><p>因为题目中要求了<code>k</code>个一组进行链表翻转，不足<code>k</code>个的则不需要进行翻转了，因此每一次进行翻转之前需要先看一下后面的节点数是否还够<code>k</code>个</p><p><img src="./25-pic.png" alt=""></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} k * @return {ListNode} */</span><span class="token keyword">var</span> reverseKGroup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> headPrev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  headPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> startPrev <span class="token operator">=</span> headPrev<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先判断一下剩余的节点是否够k个</span>    <span class="token keyword">let</span> groupSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>groupSize <span class="token operator">&lt;=</span> k <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      groupSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不足k个就直接不需要处理了，够的话将current指针重新指回到之前的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>groupSize <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> current <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// k个一组进行翻转翻转</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>      prev <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 修改翻转后的首尾节点后继指针指向</span>    startPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>    start<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    startPrev <span class="token operator">=</span> start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 下一组开头节点的前驱结点</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> headPrev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【剑指offer-06】从尾到头打印链表"><a href="#【剑指offer-06】从尾到头打印链表" class="headerlink" title="【剑指offer-06】从尾到头打印链表"></a>【剑指offer-06】从尾到头打印链表</h2><h3 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">题目链接-剑指offer-06</a></p><p><img src="./offer-06.png" alt=""></p><h3 id="解法-22"><a href="#解法-22" class="headerlink" title="解法"></a>解法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number[]} */</span><span class="token keyword">var</span> reversePrint <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【143】重排链表"><a href="#【143】重排链表" class="headerlink" title="【143】重排链表"></a>【143】重排链表</h2><h3 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/reorder-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./143.png" alt=""></p><h3 id="解法-23"><a href="#解法-23" class="headerlink" title="解法"></a>解法</h3><p>题目的意思是，对于一个有n个节点的链表，原本的排列依次是节点1 – 节点n，现在需要将其改成第一个节点后面接着是倒数第一个节点，然后再是第二个节点，后面接着倒数第二个节点，依次往下</p><p>相当于是两个节点作为一组，<code>节点i</code>和<code>节点n-i</code>作为一组连接起来</p><p>显然，这个题目里面，需要能够同时访问到链表的开头节点和链表的结尾节点，并且开头的节点要求<strong>先进先出</strong>，后面的节点要求<strong>后进先出</strong>，自然就很容易想到使用一个队列和一个栈的方式来存储，将前半部分节点放入队列，后半部分放入栈</p><p>但是考虑到节点的个数是不确定的，不知道链表的中间位置会在哪，因此采用一个队列+一个栈的方式，实现起来有点问题，于是想到了双向队列。</p><p>先对链表进行一次遍历，将所有的节点放入到双向队列中，为了防止链表出现环，在遍历的时候顺便把节点间的连接断开。取出来的时候，先取出对头的节点，以及队尾的节点，这样刚好是一组<code>节点i</code>和<code>节点n-i</code>的组合，连接起来即可</p><p>每一个组合之间还需要相互连接起来，因此需要一个指针<code>prev</code>将前一个组合的后面的一个节点保存下来</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {void} Do not return anything, modify head in-place instead. */</span><span class="token keyword">var</span> reorderList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> doubleQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        doubleQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>doubleQueue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> odd <span class="token operator">=</span> doubleQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            even <span class="token operator">=</span> doubleQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>        even <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">)</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> even<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><h2 id="【455】两数相加-1"><a href="#【455】两数相加-1" class="headerlink" title="【455】两数相加||"></a>【455】两数相加||</h2><h3 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./445.png" alt=""></p><h3 id="解法-24"><a href="#解法-24" class="headerlink" title="解法"></a>解法</h3><p>因为不能将链表翻转，而加法需要从末尾开始计算，所以先将链表中的数据存储的栈中，然后再依次计算各个位上的相加，最后得到一个新的链表</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        num2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> stack2<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> v1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> extra<span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-05】链表求和-1"><a href="#【面试题02-05】链表求和-1" class="headerlink" title="【面试题02.05】链表求和"></a>【面试题02.05】链表求和</h2><h3 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/sum-lists-lcci/" target="_blank" rel="noopener">题目链接-面试题02.05 链表求和</a></p><p><img src="./interview.02.05.png" alt=""></p><h3 id="解法-25"><a href="#解法-25" class="headerlink" title="解法"></a>解法</h3><p>这个题因为给出的链表是反序的数字链表，因此直接按照数字相加的方式执行计算即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num1 <span class="token operator">||</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">?</span> num1<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num2 <span class="token operator">?</span> num2<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num1 <span class="token operator">=</span> num1 <span class="token operator">&amp;&amp;</span> num1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        num2 <span class="token operator">=</span> num2 <span class="token operator">&amp;&amp;</span> num2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extra <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1290】二进制链表转整数-1"><a href="#【1290】二进制链表转整数-1" class="headerlink" title="【1290】二进制链表转整数"></a>【1290】二进制链表转整数</h2><h3 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./1290.png" alt=""></p><h3 id="解法-26"><a href="#解法-26" class="headerlink" title="解法"></a>解法</h3><h4 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h4><p>如果不限制空间复杂度为O(1)的话，可以先用一个栈将链表中的节点都存到栈中，然后根据二进制转换成十进制的计算规则来计算最后的结果</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="翻转链表-1"><a href="#翻转链表-1" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>如果限定了空间复杂度为O(1)，则可以先将链表翻转，然后再计算</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number} */</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【82】删除排序链表中的重复元素"><a href="#【82】删除排序链表中的重复元素" class="headerlink" title="【82】删除排序链表中的重复元素||"></a>【82】删除排序链表中的重复元素||</h2><h3 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./82.png" alt=""></p><h3 id="解法-27"><a href="#解法-27" class="headerlink" title="解法"></a>解法</h3><p>题目中要求的是，删除所有重复的元素，只要是有重复的节点，就将这些相同的节点<strong>全部</strong>删除，而不仅仅是把重复的节点删除</p><p>首先先通过<code>prev</code>指针将前面的一个节点保存起来，然后通过两个指针<code>left</code>和<code>right</code>，开始时候两个指针指向同一个节点，然后判断<code>right.val === right.next.val</code>，如果<code>right</code>指针指向的节点的值和其后继节点的值相同，也就意味着当前节点是个重复节点，需要删除。</p><p>先继续让<code>right</code>指针往后遍历，把这一段重复的节点都先找出来，然后通过<code>prev.next = right.next</code>来将这一段重复的节点全部删除掉</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> deleteDuplicates <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>val <span class="token operator">===</span> right<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找出与当前节点相同的所有的重复节点</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 删除重复节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> head <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 正常非重复节点指针后移</span>            prev <span class="token operator">=</span> left<span class="token punctuation">;</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【83】删除排序链表中的重复元素"><a href="#【83】删除排序链表中的重复元素" class="headerlink" title="【83】删除排序链表中的重复元素"></a>【83】删除排序链表中的重复元素</h2><h3 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">题目链接-83.删除排序链表中的重复元素</a></p><p><img src="./83.png" alt=""></p><h3 id="解法-28"><a href="#解法-28" class="headerlink" title="解法"></a>解法</h3><p>通过两个指针<code>left</code>和<code>right</code>对链表进行遍历，每次遍历一个节点的时候，<code>left</code>和<code>right</code>指针指向同一个节点，然后通过<code>right</code>指针去看下一个节点是否和当前节点重复了，如果重复，则让<code>right</code>指针一直往下走，把重复的多个节点都找出来，最后<code>right</code>指针停在重复的一段节点的最末尾</p><p>此时执行判断<code>left !== right</code>可以得到<code>true</code>，进而知道<code>left</code>和<code>right</code>之间是一段重复的节点，只需要将第一个节点之外的其他节点删除即可，也就是执行<code>left.next = right.next</code>，然后继续遍历后面的节点</p><p><img src="./83-pic.png" alt=""></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> deleteDuplicates <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>val <span class="token operator">===</span> right<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            right<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-01】移除未排序链表的重复节点"><a href="#【面试题02-01】移除未排序链表的重复节点" class="headerlink" title="【面试题02.01】移除未排序链表的重复节点"></a>【面试题02.01】移除未排序链表的重复节点</h2><h3 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-duplicate-node-lcci/" target="_blank" rel="noopener">题目链接-面试题02.01.移除未排序链表的重复节点</a></p><p><img src="./interview.02.01.png" alt=""></p><h3 id="解法-29"><a href="#解法-29" class="headerlink" title="解法"></a>解法</h3><p>题目给出的链表是未排序的链表，重复的节点不一定会是连续出现，因此不能按照双指针法来解决。</p><p>这里可以通过一个数组，在遍历链表的时候，先看一下是数组中是否已经有这个节点值出现过了，如果有的话则说明这是一个重复出现的节点，需要删除，而如果没有出现过的话，则说明这个节点没有出现过，只需要将节点值存入数组，然后继续向后面遍历即可。</p><p>在遍历的时候，可以通过一个<code>prev</code>指针来存储当前节点的前一个节点，也可以直接通过遍历前驱结点的方式来遍历</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> removeDuplicateNodes <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> ele <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除后面的一个节点，同时当前节点指针停在原来位置不动</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【234】回文链表"><a href="#【234】回文链表" class="headerlink" title="【234】回文链表"></a>【234】回文链表</h2><h3 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./234.png" alt=""></p><h3 id="解法-30"><a href="#解法-30" class="headerlink" title="解法"></a>解法</h3><h4 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h4><p>通过一个双向队列，先将链表中的所有的节点放入到双向队列中，然后对双向队列进行遍历，每次取出队头结点和队尾节点，如果两个值相同，则进行下一次的比较，如果两个值不同，则意味着不是回文链表，直接返回<code>false</code></p><p>应该注意，对双向队列的循环应该在其元素个数为1的时候停止</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dique <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dique<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>dique<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dique<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> dique<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双向队列其实还可以通过一个数组+双指针来代替，一个指针指向头部，从前面往后面移动，一个指针指向尾部，从后面往前面移动</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><h4 id="翻转链表-2"><a href="#翻转链表-2" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>如果是要限制空间复杂度为O(1)的话，就需要将链表从中间位置分开，变成两半的链表，然后将后面的一半子链表翻转</p><p>翻转之后的链表如果与前面一半的链表节点一一对应相等，则说明链表是回文链表</p><p>这里应该要注意到的是，因为将后面的一半链表翻转了，改变了原本的链表结构，因此需要在返回结果前将链表再修正回来。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> secondList <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> firstList <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> firstList<span class="token punctuation">,</span> p2 <span class="token operator">=</span> secondList<span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">!==</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mid<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>secondList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【817】链表组件"><a href="#【817】链表组件" class="headerlink" title="【817】链表组件"></a>【817】链表组件</h2><h3 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/linked-list-components/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./817.png" alt=""></p><h3 id="解法-31"><a href="#解法-31" class="headerlink" title="解法"></a>解法</h3><p>题目中要找到给定的列表<code>G</code>中的组件个数，可以通过找出列表<code>G</code>中，属于某个组件的结尾节点的个数，即为组件的个数。</p><p>判断某个节点的值是否是某一个组件的结尾，依据是，列表G中包含了当前节点的值，但是不包含当前节点的后继节点的值，</p><p>也即是<code>G.includes(current.val) &amp;&amp; !G.includes(current.next.val)</code>，同时考虑到链表的最后一个节点<code>current.next</code>不存在，因此最后的判断</p><p>某个节点的值是否是某一个组件的结尾的依据就是<code>G.includes(current.val) &amp;&amp;(current.next == null || !G.includes(current.next.val))</code></p><p><code>G</code>中的元素值可能会重复，因此将其通过一个集合来去重</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number[]} G * @return {number} */</span><span class="token keyword">var</span> numComponents <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> G<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1367】二叉树中的列表"><a href="#【1367】二叉树中的列表" class="headerlink" title="【1367】二叉树中的列表"></a>【1367】二叉树中的列表</h2><h3 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/linked-list-in-binary-tree/" target="_blank" rel="noopener">题目链接-1367.二叉树中的列表</a></p><p><img src="./1367.png" alt=""></p><h3 id="解法-32"><a href="#解法-32" class="headerlink" title="解法"></a>解法</h3><p>题目中要求是查找一颗二叉树中是否存在某一条路径的节点值，恰好与给出的链表的节点值一一对应相等。</p><p>因为二叉树中的路径并不一定会出现在树的哪一个位置，整棵树的所有的位置理论上都可能是满足条件的结果。</p><p>如果是暴力枚举的话，则需要在遍历链表的节点的时候，一个一个的去看树中是否有节点对应，并且是满足条件的路径。</p><p>还有一个比较容易想到的思路是递归，先看当前节点是否和链表的对应位置的节点相等，如果相等则继续树的左节点或是右节点是否与链表的后面的节点相等，形成路径。如果当前节点与链表对应位置的节点值不相等，则看树中当前节点的左子树或是右子树是否满足条件。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> isSubPath <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubPath</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubPath</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">!==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【725】分隔链表"><a href="#【725】分隔链表" class="headerlink" title="【725】分隔链表"></a>【725】分隔链表</h2><h3 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/split-linked-list-in-parts/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./725.png" alt=""></p><h3 id="解法-33"><a href="#解法-33" class="headerlink" title="解法"></a>解法</h3><p>题目的意思是，将一个原本的完整的链表，分割成指定的<code>k</code>段的子链表，并且每段的节点数尽可能平均，任意两段之间节点个数差距不超过1。</p><p>返回的结果是一个数组，数组中的元素是对应的每一段的子链表的头结点</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} root * @param {number} k * @return {ListNode[]} */</span><span class="token keyword">var</span> splitListToParts <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> extra <span class="token operator">=</span> size <span class="token operator">%</span> k<span class="token punctuation">;</span>    <span class="token keyword">const</span> groupSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>size <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> groupIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>groupIndex <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>j <span class="token operator">&lt;</span> groupSize <span class="token operator">+</span> <span class="token punctuation">(</span>groupIndex <span class="token operator">&lt;</span> extra <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            item <span class="token operator">=</span> item<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            current <span class="token operator">=</span> current <span class="token operator">?</span> current<span class="token punctuation">.</span>next <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">[</span>groupIndex<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【86】分隔链表"><a href="#【86】分隔链表" class="headerlink" title="【86】分隔链表"></a>【86】分隔链表</h2><h3 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">题目链接-86.分隔链表</a></p><p><img src="./86.png" alt=""></p><h3 id="解法-34"><a href="#解法-34" class="headerlink" title="解法"></a>解法</h3><p>题目的意思是，给定一个特定的值<code>x</code>，对于链表中的每个节点，所有小于这个特定值<code>x</code>的节点，都应该排在大于或者等于这个特定值的节点前面，并且所有节点的相对顺序应该保持不变。</p><p>分析后可以知道，实际上就是要将链表中的节点值小于特定值的节点，移动到前面来，而节点值大于等于这个特定值的节点，则保持在原位不动即可。</p><p><img src="./86-pic-1.png" alt=""></p><p>根据分析，只需要对链表进行遍历，然后如果当前节点的值小于指定的值<code>x</code>，则移动该节点到前面</p><p>因为要保持节点的相对位置不动，因此需要用一个指针<code>left</code>来标记前面哪个节点是最新移动过来的，然后将当前节点放到这个<code>left</code>指针的后面，同时更新<code>left</code>指针指向</p><p><img src="./86-pic-2.png" alt=""></p><p>考虑到一个极端的情况，即给定的值<code>x</code>比链表中所有节点的值都要大，此时所有节点都需要移动，但是分析发现，此时会满足<code>left.next === current</code>，因此这种情况下不需要移动节点，只需要继续向后遍历即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} x * @return {ListNode} */</span><span class="token keyword">var</span> partition <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 节点是链表第一个节点，或者是连续的多个节点小于x</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev <span class="token operator">||</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> current <span class="token operator">===</span> left<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                prev <span class="token operator">=</span> left <span class="token operator">=</span> current<span class="token punctuation">;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 先将节点从链表中删除</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第一个要移动的节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> oldHead <span class="token operator">=</span> head<span class="token punctuation">;</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> oldHead<span class="token punctuation">;</span>                head <span class="token operator">=</span> current<span class="token punctuation">;</span>                left <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> next <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                left<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>                left <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者可以通过添加一个虚拟头结点，这样就能把这些特殊情况都转变成正常处理，统一起来</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} x * @return {ListNode} */</span><span class="token keyword">var</span> partition <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> headPrev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  headPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> left <span class="token operator">=</span> headPrev<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>next <span class="token operator">===</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      left<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>      left <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      prev <span class="token operator">=</span> current<span class="token punctuation">;</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> headPrev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【面试题02-04】分割链表"><a href="#【面试题02-04】分割链表" class="headerlink" title="【面试题02.04】分割链表"></a>【面试题02.04】分割链表</h2><h3 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/partition-list-lcci/" target="_blank" rel="noopener">题目链接-面试题02.04.分割链表</a></p><p><img src="./interview.02.04.png" alt=""></p><h3 id="解法-35"><a href="#解法-35" class="headerlink" title="解法"></a>解法</h3><p>这个题目和之前<a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">题目链接-86.分隔链表</a>的链表分隔有一些不一样，86题中要求的是节点的相对位置保持不变，因此只需要将节点值小于给定值<code>x</code>的节点移动到前面即可</p><p>而这个题中，要求的是每个节点都要移动，同样还是将链表分割成小于<code>x</code>和大于等于<code>x</code>的两段，并且是头插入的方式，后面移动的节点排在前面移动的节点的前面</p><p>这个题的解法可以通过分别将节点值小于<code>x</code>和大于等于<code>x</code>的节点放到两个新链表中，然后最后再将两个链表连接起来即可</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} x * @return {ListNode} */</span><span class="token keyword">var</span> partition <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> leftHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rightHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> leftEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftEnd<span class="token punctuation">)</span> leftEnd <span class="token operator">=</span> current<span class="token punctuation">;</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> leftHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      leftHead<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      current<span class="token punctuation">.</span>next <span class="token operator">=</span> rightHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      rightHead<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    current <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> rightHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有节点的值都比x大</span>  leftEnd<span class="token punctuation">.</span>next <span class="token operator">=</span> rightHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">return</span> leftHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【剑指offer52】两个链表的第一个公共节点"><a href="#【剑指offer52】两个链表的第一个公共节点" class="headerlink" title="【剑指offer52】两个链表的第一个公共节点"></a>【剑指offer52】两个链表的第一个公共节点</h2><h3 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/" target="_blank" rel="noopener">题目链接-剑指offer52.两个链表的第一个公共节点</a></p><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">题目链接-160.相交链表</a></p><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noopener">题目链接-面试题02.07.链表相交</a></p><p><img src="./offer-52.png" alt=""></p><h3 id="解法-36"><a href="#解法-36" class="headerlink" title="解法"></a>解法</h3><p>题目中的意思是两个链表，可能会有一段公共的子链表。</p><p>对于两个链表，对每个链表都进行分段处理。两个链表的公共子链表部分即为<strong>C</strong>，第一个链表的剩余的非公共部分即为<strong>A</strong>，第二个链表的非公共部分记为<strong>B</strong> 。第一个链表可以记为<strong>A+C</strong>，第二个链表可以记为<strong>B+C</strong>。</p><p>通过两个指针分别从两个链表开始遍历，<code>la</code>指针从第一个链表开始遍历，当遍历到第一个链表的末尾后，再跳回到第二个链表的头结点，从第二个链表开头，遍历第二个链表。</p><p><code>lb</code>指针从第二个链表开始遍历，当遍历到第二个链表末尾的时候，跳回到第一个链表的头结点，遍历第一个链表。</p><p>这样，<code>la</code>指针在遍历第一个链表的时候，走过的距离（节点数）为<strong>A+C</strong>，后面遍历完第二个链表时走的距离为<strong>B</strong>，走过的总距离为<strong>A+C+B</strong></p><p><code>lb</code>指针相应的，走过的距离为<strong>B+C+A</strong>，两个指针走过的距离相等，此时如果两个链表有公共部分，则两个指针恰好会在两个链表的公共部分交叉位置相遇，因此判断循环退出的条件为<code>la !== lb</code></p><p>如果两个链表没有公共部分，相当于<strong>C</strong>的长度为0，此时第一个指针恰好走到第二个链表末尾，第二个指针恰好走到第一个指针的末尾，然后下一次循环的时候就有<code>la ===null</code>,<code>lb === null</code>，同样会满足<code>la === lb</code>，跳出循环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} headA * @param {ListNode} headB * @return {ListNode} */</span><span class="token keyword">var</span> getIntersectionNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>headA<span class="token punctuation">,</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> la <span class="token operator">=</span> headA<span class="token punctuation">,</span> lb <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>la <span class="token operator">!==</span> lb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        la <span class="token operator">=</span> la <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> la<span class="token punctuation">.</span>next <span class="token punctuation">:</span> headB<span class="token punctuation">;</span>        lb <span class="token operator">=</span> lb <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> lb<span class="token punctuation">.</span>next <span class="token punctuation">:</span> headA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> la<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【148】排序链表"><a href="#【148】排序链表" class="headerlink" title="【148】排序链表"></a>【148】排序链表</h2><h3 id="题目描述-33"><a href="#题目描述-33" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/sort-list/" target="_blank" rel="noopener">题目链接</a></p><p><img src="./148.png" alt=""></p><h3 id="解法-37"><a href="#解法-37" class="headerlink" title="解法"></a>解法</h3><p>因为题目中要求的时间复杂度是O(nlogn)，空间复杂度是常数级，想到可以通过<strong>归并排序</strong>来实现。</p><p>先将链表分开成为左右两段，然后通过递归排好两段子链表，然后将两段子链表合并得到排好序的新链表</p><p>应该要注意的是，先找到链表的中间节点，将链表分割成前后两段的时候，要将中间节点和其后继节点之间的连接断开。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> sortList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> next <span class="token operator">=</span> mid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    mid<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> curLeft <span class="token operator">=</span> left<span class="token punctuation">,</span> curRight <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">const</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curLeft <span class="token operator">&amp;&amp;</span> curRight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curLeft<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> curRight<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> curLeft<span class="token punctuation">;</span>            curLeft <span class="token operator">=</span> curLeft<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> curRight<span class="token punctuation">;</span>            curRight <span class="token operator">=</span> curRight<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curLeft<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> curLeft<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curRight<span class="token punctuation">)</span> current<span class="token punctuation">.</span>next <span class="token operator">=</span> curRight<span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getMiddleOfList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【147】对链表进行插入排序"><a href="#【147】对链表进行插入排序" class="headerlink" title="【147】对链表进行插入排序"></a>【147】对链表进行插入排序</h2><h3 id="题目描述-34"><a href="#题目描述-34" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/" target="_blank" rel="noopener">题目链接-147.对链表进行插入排序</a></p><p><img src="./147.png" alt=""></p><h3 id="解法-38"><a href="#解法-38" class="headerlink" title="解法"></a>解法</h3><p> 对链表遍历的时候，从链表的第二个节点开始遍历，因为第一个节点认为是已经排好序的。</p><p>因为链表是单向链表，在查找当前节点的插入位置的时候，应该从头结点开始查找。在查找插入位置之前，先进行判断是否需要执行插入操作，即<code>prev.val &gt; current.val</code></p><p>节点插入的时候，要考虑在头结点之前插入的情况</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> insertionSortList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>val <span class="token operator">></span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> insertPosition <span class="token operator">=</span> <span class="token function">getInsertPosition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> insertPosition<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInsertPosition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> head<span class="token punctuation">,</span> leftPrev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftPrev <span class="token operator">=</span> left<span class="token punctuation">;</span>        left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> leftPrev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> target<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> ele<span class="token punctuation">;</span>        ele<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        target<span class="token punctuation">.</span>next <span class="token operator">=</span> ele<span class="token punctuation">;</span>        ele<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1019】链表中的下一个更大节点"><a href="#【1019】链表中的下一个更大节点" class="headerlink" title="【1019】链表中的下一个更大节点"></a>【1019】链表中的下一个更大节点</h2><h3 id="题目描述-35"><a href="#题目描述-35" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">题目链接-1019.链表中的下一个更大节点</a></p><p><img src="./1019.png" alt=""></p><h3 id="解法-39"><a href="#解法-39" class="headerlink" title="解法"></a>解法</h3><p>直接按照题目的意思，暴力检索即可。</p><p>对链表进行遍历，对于每个节点，再去看其后面的节点中是否存在有节点值比当前节点更大的，有就得到当前节点对应的结果，没有则数组对应的位置写入0即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {number[]} */</span><span class="token keyword">var</span> nextLargerNodes <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>val <span class="token operator">></span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        next <span class="token operator">||</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【1171】从链表中删去总和值为零的连续节点"><a href="#【1171】从链表中删去总和值为零的连续节点" class="headerlink" title="【1171】从链表中删去总和值为零的连续节点"></a>【1171】从链表中删去总和值为零的连续节点</h2><h3 id="题目描述-36"><a href="#题目描述-36" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/" target="_blank" rel="noopener">题目链接-1171.从链表中删去总和值为零的连续节点</a></p><p><img src="./1171.png" alt=""></p><h3 id="解法-40"><a href="#解法-40" class="headerlink" title="解法"></a>解法</h3><h4 id="暴力检索"><a href="#暴力检索" class="headerlink" title="暴力检索"></a>暴力检索</h4><p>对链表进行遍历，当前节点<code>current</code>，先判断是否值为0，如果是0的话直接先删除这个节点。如果不是0，则存起来这个节点的值，然后遍历当前节点<code>current</code>后面的节点，查找是否存在使得连续一段的总和值为0的节点段，有的话则将其删除，没有的话则<code>prev</code>指针和<code>current</code>指针往后移动</p><p>在删除某一段总和值为0的子链表的时候，<code>prev.next = remain.next</code>，然后<code>prev</code>指针不能往后移动，应该停在原位，并且<code>current</code>指针应该跳到删除的子链表段的结尾节点的下一个节点，即<code>current = remain.next</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> removeZeroSumSublists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">let</span> remain <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">let</span> isDeleted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在下面的remian的循环中是否找到并删除了总和值为零的子链表段</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>remain<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> remain<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> head <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">else</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                current <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                remain<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                isDeleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            remain <span class="token operator">=</span> remain<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDeleted<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 删除了链表段的时候，prev指针停在原位，current指针移到 remain.next</span>            prev <span class="token operator">=</span> current<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map存储总和"><a href="#Map存储总和" class="headerlink" title="Map存储总和"></a>Map存储总和</h4><p>通过两次遍历链表，第一次遍历的时候，通过一个<code>Map</code>，将每个节点与其前面节点的总和值作为<code>key</code>，当前节点作为值<code>value</code>存储起来</p><p>因为如果两个节点之间的节点总和值为0的话，则两个节点在计算当前节点与其前面节点的总和值的时候，得到的<code>sum</code>应该是相等的，在存到<code>map</code>的时候，就会覆盖掉前面的节点。</p><p>而在第二次遍历的时候，为了找到哪些节点之间的总和值为0，就可以看一下当前节点<code>current</code>与其前面节点的总和值<code>sum</code>为键，对应的节点<code>value</code>是哪一个，如果<code>current</code>与<code>value</code>两个节点是同一个节点，则说明当前节点与其后面的所有节点之间的总和值都不是0，则只需要继续遍历下一个节点即可。而如果两个节点不是同一个节点，则说明这两个节点之间的总和值为0，则需要将这两个节点之间的子链表删除掉，也即是执行<code>current.next = map.get(sum).next</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> removeZeroSumSublists <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    current <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Leetcode 两个栈实现队列</title>
      <link href="/leetcode/stack/stacksforqueue/readme/"/>
      <url>/leetcode/stack/stacksforqueue/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/stacksForQueue" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt=""><br><img src="./readme/problem.png" alt=""></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>用一个插入栈，一个删除栈来存储数据。插入的时候，把数据插入到插入栈中，在删除的时候，把插入栈的数据依次出栈，再压入删除栈中，然后把删除栈中的最顶元素出栈。</p><p>删除操作的时候，只在删除栈为空的时候才把插入栈的数据转移过去。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> CQueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>insertStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>deleteStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @param {number} value * @return {void} */</span>CQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>appendTail <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>insertStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @return {number} */</span>CQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>deleteHead <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteStack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>insertStack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deleteStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>insertStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deleteStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> value <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：492ms,%<br>内存：47.9MB,%</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href=""></a></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href=""></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试 2020-06-30</title>
      <link href="/front-interview-wepie/"/>
      <url>/front-interview-wepie/</url>
      
        <content type="html"><![CDATA[<h2 id="前端面试"><a href="#前端面试" class="headerlink" title="前端面试"></a>前端面试</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span>、自己动手写一个localStorage<span class="token number">2</span>、简单实现Node的Events模块<span class="token number">3</span>、给出一个区间的集合，请合并所有重叠的区间。示例 <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span> 区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 重叠<span class="token punctuation">,</span> 将它们合并为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>示例 <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>解释<span class="token punctuation">:</span> 区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> 可被视为重叠区间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>通过<code>Map</code> 来做数据存储：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LocalStorageByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>Object</code> 来做数据存储：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LocalStorageByObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>个人的理解，<code>localSrotage</code> 应该是个单例，所以写成了单例模式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> LocalStorage <span class="token operator">=</span> LocalStorageByObject<span class="token punctuation">;</span><span class="token keyword">const</span> ProxyLocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>LocalStorage<span class="token punctuation">,</span> <span class="token punctuation">{</span>  construct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LocalStorageByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LocalStorageByObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>setItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>getItem <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> value <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Storage<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> LocalStorage <span class="token operator">=</span> LocalStorageByObject<span class="token punctuation">;</span><span class="token keyword">const</span> ProxyLocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>LocalStorage<span class="token punctuation">,</span> <span class="token punctuation">{</span>  construct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> _localStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {a:1,b:2}</span>_localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">_delete</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> subscribers<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      cb <span class="token operator">&amp;&amp;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">cancel</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscribers<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_delete</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subscribers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> subscribers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        subscribers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> userLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'fail'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>reson<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`user login failed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reson<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`USER_LOGIN_FAILE ==> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'success'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`getUserInfo ==> `</span></span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`USER_LOGIN_SUCCESS`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> event <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>  events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    userLogin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>userLogin<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span>userLogin<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'wenjiang'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// getUserInfo ==>  { name: 'wenjiang' } , USER_LOGIN_SUCCES</span>userLogin<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'NETWORK_ERROR'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入: [[1,3],[2,6],[8,10],[15,18]]</span><span class="token comment" spellcheck="true">// 输出: [[1,6],[8,10],[15,18]]</span><span class="token keyword">function</span> <span class="token function">mergeSection</span><span class="token punctuation">(</span>sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> last <span class="token operator">=</span> sections<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>prevStart<span class="token punctuation">,</span> prevEnd<span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>currentStart<span class="token punctuation">,</span> currentEnd<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token keyword">const</span> targetStart <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> targetEnd <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> sign1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevEnd <span class="token operator">-</span> currentStart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sign2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevStart <span class="token operator">-</span> currentStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign1 <span class="token operator">&amp;&amp;</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign2 <span class="token operator">&amp;&amp;</span>      sign1 <span class="token operator">!==</span> sign2 <span class="token comment" spellcheck="true">// 区间包含的情况</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span>      <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>targetStart<span class="token punctuation">,</span> targetEnd<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>  <span class="token keyword">return</span> merged<span class="token punctuation">}</span><span class="token keyword">const</span> sample1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sample2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 6 ], [ 8, 10 ], [ 15, 18 ] </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 5 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h3><p>在第三题的实现中，上面的方法，没有考虑到<strong><em>区间跳格合并</em></strong>的情况<br>如果把示例输入改成如下：<br>把 [8,10] 和 [1,6] 调换顺序，则上面的方案没办法合并到 [1,3] 和 [1,6]</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> sample1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决这个问题，只需要保证区间是按照区间右端点进行排序的就可以。<br>修改后的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSection</span><span class="token punctuation">(</span>sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 按区间右端点进行升序排序，防止出现区间跳格合并的情况</span>  <span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> last <span class="token operator">=</span> sections<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>prevStart<span class="token punctuation">,</span> prevEnd<span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>currentStart<span class="token punctuation">,</span> currentEnd<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token keyword">const</span> targetStart <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> targetEnd <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">)</span>    <span class="token keyword">const</span> sign1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevEnd <span class="token operator">-</span> currentStart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sign2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>prevStart <span class="token operator">-</span> currentStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign1 <span class="token operator">&amp;&amp;</span>      Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>currentEnd <span class="token operator">-</span> prevStart<span class="token punctuation">)</span> <span class="token operator">===</span> sign2 <span class="token operator">&amp;&amp;</span>      sign1 <span class="token operator">!==</span> sign2 <span class="token comment" spellcheck="true">// 区间包含的情况</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span>      <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>targetStart<span class="token punctuation">,</span> targetEnd<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  merged<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>  <span class="token keyword">return</span> merged<span class="token punctuation">}</span><span class="token keyword">const</span> sample1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sample2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 6 ], [ 8, 10 ], [ 15, 18 ] </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSection</span><span class="token punctuation">(</span>sample2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ [ 1, 5 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 数组乱序</title>
      <link href="/array-shuffle/"/>
      <url>/array-shuffle/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-数组shuffle"><a href="#Javascript-数组shuffle" class="headerlink" title="Javascript 数组shuffle"></a>Javascript 数组shuffle</h1><h2 id="快速乱序算法"><a href="#快速乱序算法" class="headerlink" title="快速乱序算法"></a>快速乱序算法</h2><p>从数组第一个元素开始进行遍历，每次将当前元素和其后面的一个随机的元素来交换。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> isInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> isInt    <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span>    <span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">?</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> rand <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> index<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> result<span class="token punctuation">[</span>rand<span class="token punctuation">]</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span>rand<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    index<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Fisher-Yates-洗牌算法"><a href="#Fisher-Yates-洗牌算法" class="headerlink" title="Fisher-Yates 洗牌算法"></a>Fisher-Yates 洗牌算法</h2><p>其实和上面的方法基本一样，但是只是改成了从数组最后一个元素开始，往前进行随机交换。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shuffleFisherYates</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> rand <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> result<span class="token punctuation">[</span>rand<span class="token punctuation">]</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span>rand<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检验乱序是否均匀"><a href="#检验乱序是否均匀" class="headerlink" title="检验乱序是否均匀"></a>检验乱序是否均匀</h2><p>通过记录每次乱序后，每个元素在乱序后的数组中的索引位置的次数，来查看数组是否乱序均匀。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 记录每个元素出现在乱序后的位置索引的次数统计,检验排序结果是否达到基本均匀乱序的效果 * @param {*} arr 测试的数组 * @param {*} cb 乱序算法 * @param {*} count 测试的次数 */</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> itemIndexObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">countItemIndex</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> itemIndexObj<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemIndexObj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">countItemIndex</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> countObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token template-string"><span class="token string">`item_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    countObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> countObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    countObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果乱序足够均匀的话，每个元素出现在不同的索引上的次数应该大致相同或者接近的。</p><pre><code>[Function: fastShuffle]{  item_3: [    12405, 12461,    12454, 12590,    12464, 12616,    12358, 12652  ],  item_1: [    12467, 12417,    12416, 12540,    12591, 12531,    12649, 12389  ],  item_5: [    12500, 12482,    12508, 12404,    12686, 12371,    12513, 12536  ],  item_2: [    12674, 12382,    12537, 12505,    12350, 12546,    12465, 12541  ],  item_6: [    12486, 12479,    12451, 12618,    12487, 12500,    12458, 12521  ],  item_8: [    12368, 12705,    12441, 12445,    12591, 12468,    12587, 12395  ],  item_4: [    12683, 12454,    12522, 12419,    12494, 12540,    12395, 12493  ],  item_7: [    12417, 12620,    12671, 12479,    12337, 12428,    12575, 12473  ]}[Function: shuffleFisherYates]{  item_2: [    12502, 12464,    12580, 12481,    12445, 12473,    12483, 12572  ],  item_5: [    12638, 12432,    12465, 12590,    12361, 12436,    12680, 12398  ],  item_8: [    12542, 12469,    12537, 12521,    12391, 12511,    12387, 12642  ],  item_6: [    12491, 12597,    12481, 12435,    12542, 12450,    12379, 12625  ],  item_7: [    12389, 12562,    12589, 12617,    12396, 12447,    12460, 12540  ],  item_3: [    12385, 12706,    12425, 12329,    12707, 12506,    12476, 12466  ],  item_4: [    12307, 12439,    12439, 12612,    12706, 12646,    12554, 12297  ],  item_1: [    12746, 12331,    12484, 12415,    12452, 12531,    12581, 12460  ]}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> 常用函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数组去重</title>
      <link href="/array-unique/"/>
      <url>/array-unique/</url>
      
        <content type="html"><![CDATA[<h2 id="集合Set去重"><a href="#集合Set去重" class="headerlink" title="集合Set去重"></a>集合<code>Set</code>去重</h2><p>通过<code>Set</code> 数据结构的去重特性来进行数组去重，再把 <code>Set</code> 转换成数组</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这种方法对于基本类型的数据 <code>number</code>,<code>string</code>,<code>boolean</code>,<code>undefined</code>,<code>null</code> 都可以正常去重，<code>NaN</code> 值也可以去重</p><p>但是对于<code>Object</code> ， <code>Array</code> 等引用类型，只有在引用相同的时候才可以去重，仅仅是值相同的时候，是不能去重的</p><h2 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf 方法"></a><code>indexOf</code> 方法</h2><p>先通过 <code>indexOf</code> 检查一下数组中是否已经有这个元素了，只有在<em>数组中还没有这个元素</em>  的时候才把这个元素添加到数组中</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueArrByIndexOf</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>indexOf</code> 去重的方法，对于<code>number</code>,<code>string</code>,<code>boolean</code>,<code>undefined</code>,<code>null</code> 五种基本数据类型也可以正常去重，<code>NaN</code> 值不能去重</p><p>对于引用类型，同样需要引用相同才能去重，而不是值相同。</p><h2 id="key-唯一性去重"><a href="#key-唯一性去重" class="headerlink" title="key 唯一性去重"></a><code>key</code> 唯一性去重</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueArrByKey</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    itemMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <em>键值对</em> 类型的数据结构，以元素为键，通过 <em>键的唯一性</em> 来去重。具体的键值对类型数据结构，可以是 <code>Object</code> 或者是 <code>Map</code> </p><p>这种方法，对于五种基本数据类型（不考虑<code>Symbol</code>），都可以正常去重，对于应用类型，同样去重去的是 <em>引用重复</em> 而不是 <em>值重复</em></p><h3 id="字符串的key"><a href="#字符串的key" class="headerlink" title="字符串的key"></a>字符串的<code>key</code></h3><p>以元素为<code>key</code> 的话，还会涉及到一些有趣的地方。上面的方法是通过 <code>Map</code> 来做键值对存储的，<code>Map</code> 是可以以<code>Object</code> 来做键的，不需要把元素转换成字符串。</p><p>但是如果是以<code>Object</code> 类型来做键值对存储的话，<code>Object</code> 的键是<code>string</code> 类型的，如果定义的键不是字符串类型，则会自动先调用变量上的<code>toString</code> 方法转换成字符串，然后作为键值。</p><p>这样对于符合类型，例如<code>const o1 = {a:1,b:2};const o2 = {a:1,b:3}</code> 转换成字符串后得到的都是 <code>[Object,Object]</code> ，因此键是相同的，就会被认为是重复元素被除掉，即使引用不相同，值也不相同。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueArrByObjectKey</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token keyword">const</span> uniqueArr <span class="token operator">=</span> uniqueArrByObjectKey<span class="token punctuation">;</span><span class="token keyword">const</span> sample <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span>  undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  obj<span class="token punctuation">,</span> obj<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">uniqueArr</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的去重后的结果是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">NaN</span><span class="token punctuation">,</span>  undefined<span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结果中应该注意到，数组本质也是一个<code>Object</code> 但是<code>Array</code> 上部署的<code>toString</code> 方法和<code>Object</code> 上的<code>toString</code> 不一样，数组的<code>toString</code> 相当于就是把两个方括号去掉后得到的字符串，所以数组并没有像<code>Object</code> 那样只留下一个</p><h2 id="基于值相同的引用类型去重"><a href="#基于值相同的引用类型去重" class="headerlink" title="基于值相同的引用类型去重"></a>基于值相同的引用类型去重</h2><p>想到的第一个方法就是<code>JSON.stringfy</code>，把引用类型转换成字符串，然后变成<code>string</code> 类型数据去重，去重后再<code>JSON.parse</code> 得到原本的数据</p><p>但是这个方法也不是完全正确的，具体原因在于<code>JSON.stringfy</code> 转换时候的一些限制</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueArrByKey</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">const</span> k <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    itemMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，我个人觉得基于值相同的引用类型去重似乎也没有很多的应用场景。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> 常用函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 无重复字符的最长字串</title>
      <link href="/leetcode/string/longestsubstring/readme/"/>
      <url>/leetcode/string/longestsubstring/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/longestSubstring" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- select a type of hexo pic ref --><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/longestSubstring/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目要的是 <strong>无重复</strong>字符的<strong>最长</strong>的字串，因此需要两个变量<code>currentStr</code>和<code>len</code>分别去存储当前字串和当前的最长的无重复字符的字串长度。</p><p>对字符串进行遍历，如果当前当前字符不在 <code>currentStr</code>中，则存到 <code>currentStr</code>中，如果当前字串<code>currentStr</code>中已经有了这个字符，即当前字符是重复的，</p><p>则此时应该重新计算字串，同时对比已经存储的最长字串的长度 <code>len</code> 和当前字串的长度的大小，取大的值作为 <code>len</code>的值。</p><p>然后当前字串 <code>currentStr</code> 应该从重复的字符开始截断，再拼接上当前字符。</p><p>还有一个小地方就是，<strong>无重复字符的最长字串的长度一定会小于等于字符串的无重复字符个数</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> lengthOfLongestSubstring <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> currentStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> maxLen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> len <span class="token operator">&lt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> currentStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentStr <span class="token operator">=</span> currentStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>currentStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            currentStr <span class="token operator">+</span><span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> currentStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该要注意的地方是在当前字符存在于当前字串时候，对当前字串的切分应该是从 <code>indexOf(chars[i]) +1</code>而不是 <code>indexOf(chars[i])</code>，否则重复的字符就不能被切掉</p><pre class="line-numbers language-js"><code class="language-js">currentStr <span class="token operator">=</span> currentStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>currentStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：88ms,93.75%<br>内存：37.7MB, 76.71%</p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>和上面的解法大致相同，只是把字符串转换成数组进行操作</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> lengthOfLongestSubstring <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> currentStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> maxLen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> len <span class="token operator">&lt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> item <span class="token operator">=</span> chars<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> currentStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentStr <span class="token operator">=</span> currentStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>currentStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> currentStr <span class="token operator">=</span> currentStr <span class="token operator">+</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> currentStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-1"><a href="#效率-1" class="headerlink" title="效率"></a>效率</h3><p>耗时：88ms,93.75 %<br>内存：37.7MB,76.71 %</p>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 赎金信</title>
      <link href="/leetcode/string/canconstruct/readme/"/>
      <url>/leetcode/string/canconstruct/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/ransom-note/submissions/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/canConstruct" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- <--! select a type of post img ref --> --><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/canConstruct/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>逐个遍历 “赎金信” <code>ransomNote</code> 中的字符，看在杂志字符串 <code>magazine</code>中是否存在，存在则在杂志字符串中删除此字符（删除一个），不存在则直接 <code>return false;</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} ransomNote * @param {string} magazine * @return {boolean} */</span><span class="token keyword">var</span> canConstruct <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ransomNote<span class="token punctuation">,</span> magazine<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ransomNote<span class="token punctuation">.</span>length <span class="token operator">></span> magazine<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> ransomNote<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>magazine<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ransomNote<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        magazine <span class="token operator">=</span> magazine<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>ransomNote<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里replace 不能加 `g`标志</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：84ms, 81.98%<br>内存：40.7MB</p>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 反转字符串</title>
      <link href="/leetcode/string/reversestring/readme/"/>
      <url>/leetcode/string/reversestring/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/reverseString" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- <--! select a type of post img ref --> --><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/reverseString/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个 <code>javascript</code>中有相应的数组方法 <code>reverse</code> 来完成，直接调用就可以.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead. */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：136ms, 64.18%<br>内存：46.6MB</p><h2 id="解法2-逐个反转"><a href="#解法2-逐个反转" class="headerlink" title="解法2 逐个反转"></a>解法2 逐个反转</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>上面解法1显然过于依赖语言的特性，如果要从通用一点的解决思想来考虑的话，就是遍历一下数组（遍历到一半），然后收尾对应位置的字符调换位置即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead. */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，下面这一句语句时使用了解构赋值来调换收尾两个元素的值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href=""></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 验证回文字符串</title>
      <link href="/leetcode/string/ispalindrome/readme/"/>
      <url>/leetcode/string/ispalindrome/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/valid-palindrome/" target="_blank" rel="noopener">Leetcode-题目链接</a>   </p><p><a href="https://github.com/WenJiang99/leetcode/tree/master/String/isPalindrome" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><!-- ![](https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/isPalindrome/problem.png)    --><p><img src="./readme/problem.png" alt=""></p><h2 id="解法1-数组反转"><a href="#解法1-数组反转" class="headerlink" title="解法1 数组反转"></a>解法1 数组反转</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为只需要考虑数字、字母，并且不需要考虑大小写，因此需要先对字符串中的字符进行处理，去掉除了数字和字母外的字符,同时，字符串应该统一成大写或者统一小写</p><p>然后只需要比较一下字符串反转后和原来字符串是否相等就可以知道是否是回文串了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^0-9a-zA-Z]/ig</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> chars<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">===</span> chars<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：80ms,80.28%<br>内存：38MB,23.08%</p><h2 id="解法2-双向“指针”"><a href="#解法2-双向“指针”" class="headerlink" title="解法2 双向“指针”"></a>解法2 双向“指针”</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同样的，先对字符做一些格式处理，然后定义两个索引<code>head</code> , <code>root</code>分别指向字符串的开头和结尾，比较两个索引位置的字符是否相同</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\da-z]/gi</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        root <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> head <span class="token operator">>=</span> root<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> head <span class="token operator">&lt;</span> root <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head <span class="token operator">++</span><span class="token punctuation">;</span>        root <span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 二进制求和</title>
      <link href="/leetcode/string/addbinary/readme/"/>
      <url>/leetcode/string/addbinary/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/add-binary/" target="_blank" rel="noopener">Leetcode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/addBinary" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt=""><br><img src="./readme/problem.png" alt=""></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>看到题目描述后的第一个想法是，<strong>先把二进制数转换成十进制，然后求和再换成二进制</strong>，于是开始写了一个版本</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">toDecimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">toDecimal</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {String} str * @return {Number} */</span><span class="token keyword">function</span> <span class="token function">toDecimal</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是提交之后却没有通过，在看到了出现错误的案例之后让我一下惊了…</p><p><img src="./error.png" alt=""><br><img src="./readme/error.png" alt=""></p><p>老实说我确实是没有考虑到可能会有这样的输入，然后因为超出了<code>JavaScript</code>数值类型数据的范围导致了运算错误</p><pre><code>&quot;10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101&quot;&quot;110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011&quot;</code></pre><p>看来，直接转换成十进制运算似乎是行不通的。</p><p>于是想到把输入的两个字符串就当成字符串来处理，一个一个字符的直接按照 <strong>二进制加法</strong> 运算规则来计算，然后结果也存到一个字符串或者数组中，这样就可以避免输入的数值超出数据范围的问题了。</p><h2 id="解法1-模拟二进制运算"><a href="#解法1-模拟二进制运算" class="headerlink" title="解法1 模拟二进制运算"></a>解法1 模拟二进制运算</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如上所说，应该按照字符串或者数组来对输入进行处理，<strong>从最低位开始往最高位 按位相加求和，得到个位和进位</strong>,个位直接就是输出的结果中对应位置的字符，而进位直接传到下一次进行运算，最后把数组转换成字符串返回</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>long<span class="token punctuation">,</span> short<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">></span> b<span class="token punctuation">.</span>length        <span class="token operator">?</span> <span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">:</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> unit<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> long<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>unit<span class="token punctuation">,</span> extra<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byteSum</span><span class="token punctuation">(</span>long<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">>=</span> short<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> short<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> extra<span class="token punctuation">)</span>        target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    extra <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 二进制加法运算 * @param {String} bit1 一个二进制位， 0 || 1 * @param {String} bit2 二进制位 * @param {Number | String} extra 上一次相加的进位 * @return {[Number,Number]} [unit,extra] : unit 是相加后的个位，extra 是进位*/</span><span class="token keyword">function</span> <span class="token function">byteSum</span><span class="token punctuation">(</span>bit1<span class="token punctuation">,</span> bit2<span class="token punctuation">,</span> extra<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>bit1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>bit2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>long<span class="token punctuation">,</span> short<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">></span> b<span class="token punctuation">.</span>length    <span class="token operator">?</span> <span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">:</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码是用来得到输入字符串 <code>a,b</code>中的较长、较短的字符串，然后转换成数组并将数组反转，反转是为了从低位开始处理（也可以直接不反转，但是也得从低位开始计算）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> unit<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> long<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>unit<span class="token punctuation">,</span> extra<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byteSum</span><span class="token punctuation">(</span>long<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">>=</span> short<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> short<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> extra<span class="token punctuation">)</span>    target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码是遍历两个字符串，然后按位相加得到二进制结果的个位和进位，个位直接存入到数组最开头（高位）</p><pre class="line-numbers language-js"><code class="language-js">extra <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>extra<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码是用来判断最高位运算后是否也有进位的</p><p>最后把数组转换成字符串返回得到结果</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时： 76ms 63.04%<br>内存： 36.5MB 11.11%</p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>上面的第一中解法写得有一些臃肿，后来仔细想一下，其实在把字符串转换成数组后，不需要反转了，直接调用 <code>pop</code>就可以， <code>pop</code>方法会弹出最后一个元素并返回，因此只需要判断 a 和 b 的长度是否减到0就可以知道数组是否空了</p><p>同时，上面采用一个数组来存运算结果的每一个位，也可以替换成用一个字符串。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">||</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">;</span>        target <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> target<span class="token punctuation">;</span>        extra <span class="token operator">=</span> sum <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>extra <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> extra <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-1"><a href="#效率-1" class="headerlink" title="效率"></a>效率</h3><p>耗时： 64ms 95.46%;<br>内存： 35.5MB 11.11%；</p><h2 id="解法3-BigInt"><a href="#解法3-BigInt" class="headerlink" title="解法3 BigInt"></a>解法3 <code>BigInt</code></h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>上面两个方法内存消耗都是比较大，但是我也没想到还有啥方法可以优化，然后翻了一下别人提交的记录内存消耗最小的解法<br>emmmmmm，和我最开始的提交没有通过的版本思路基本是一样，但是做了数据超出范围时候的处理</p><p><strong>我好像也还是第一次知道JavaScript里面有<code>BigInt</code>这个东西的，只知道Java里有这种</strong></p><p>好了，涨知识了，看来还是基本功不牢哇…</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} a * @param {string} b * @return {string} */</span><span class="token keyword">var</span> addBinary <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> numA    <span class="token keyword">let</span> numB    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">53</span> <span class="token operator">||</span> b<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        numA <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0b"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>        numB <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"0b"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        numA <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        numB <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>numA <span class="token operator">+</span> numB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[MDN-BigInt] (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt</a>)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">MDN-parseInt</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 反转字符串中的单词</title>
      <link href="/leetcode/string/reversewords/readme/"/>
      <url>/leetcode/string/reversewords/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/submissions/" target="_blank" rel="noopener">Leetcode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/reverseWords" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt=""><br><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/reverseWords/problem.png" alt=""></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个题目也不是很难，起码思路还是很容易就可以想到了的。</p><p>题目要求只是把字符串中的单词的顺序反转过来，而不需要把单词中的每一个字母也反转，所以只需要先把字符串的每一个单词都拆分出来得到一个数组，然后调用数组的 <code>reverse</code>方法把数组反转一下，然后在重新变成一个字符串就OK了</p><p>这里需要注意的一个坑是，原来的字符串中一个单词可能有很多个空格字符分隔，但是反转后的单词都只能用一个空格分隔，所以需要做一下处理。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {string} */</span><span class="token keyword">var</span> reverseWords <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token operator">!</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>s.trim()</code> 用来先对字符串首尾的空格做一下处理，然后调用 <code>split</code>方法用空格作为分隔符把字符串拆开得到一个单词数组， <code>reverse</code> 方法用来反转数组， <code>filter</code>方法用来把数组里的空字符去掉</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：60ms 92.22$<br>内存： 34.6MB 100%</p>]]></content>
      
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 最后一个单词的长度</title>
      <link href="/leetcode/string/lengthoflastword/readme/"/>
      <url>/leetcode/string/lengthoflastword/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/length-of-last-word/" target="_blank" rel="noopener">Leetcode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/lengthOfLastWord" target="_blank" rel="noopener">github-链接</a></p><p><img src="./problem.png" alt="">   </p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/lengthOfLastWord/problem.png" alt=""></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>emmm 这是写了这么多题的最简单的一道题了 … ，思路很简单，既然说了是只包含 <strong>大小写字母和空格</strong> ，那直接就可以调用 <code>String.prototype.split</code> 方法，以空格作为分隔符号来把每个单词分隔开，然后 <code>pop</code>得到最后一个单词，返回其长度即可。</p><p>这里要注意一点的是应该要对字符串先进行 <code>trim</code> 去除收尾空格，否则如果字符串结尾是个空格符的话，<code>pop</code>出来的就是空字符串</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> lengthOfLastWord <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：56ms 93.94%<br>内存： 33.7MB 70%</p>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 外观数列</title>
      <link href="/leetcode/string/descriptionarr/readme/"/>
      <url>/leetcode/string/descriptionarr/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/count-and-say/" target="_blank" rel="noopener">LeetCode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/DescriptionArr" target="_blank" rel="noopener">Github-链接</a></p><p><img src="./problem.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/DescriptionArr/problem.png" alt=""></p><h2 id="解法1-正则表达式解法"><a href="#解法1-正则表达式解法" class="headerlink" title="解法1 正则表达式解法"></a>解法1 正则表达式解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h4><p>首先需要先理解一下题目中描述的 <strong>外观数列</strong> 到底是什么意思以及有什么规律</p><pre><code>1.     12.     113.     214.     12115.     1112211 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</code></pre><p>从上面的描述我们可以知道这个 <strong>外观数列</strong> 的大概意思</p><ul><li>数列的第n项中的结果是由其前一项的表达式所决定的，第n项中表达式中的数字序列应该是 <strong>每两个</strong>作为一组 <code>描述组合</code> $a_1 a_2$,表示其前一项中对应位置是 $a_1$个$a_2$</li><li>例如第五项$A_5$ 是 <code>111221</code>，两两分成一组为 11, 12, 21,其中 11表示第四项 $A_4$最前面是 1个1，即 ‘1’,而 12 表示 $A_4$ 中在前面的 ‘1’ 后面是 1个2,即 ‘12’,后面 21则表示有2个1,因此得到 $A_4$应该是 ‘1211’</li><li>同样如果第五项$A_5$是<code>111221</code>的话，则可以得到第六项 $A_6$应该是 312211</li></ul><p>从上面的理解我们也可以得到一些规律</p><ul><li>数列中的每一项中数字的个数一定是 <strong>2的倍数</strong>,即 $2N$，因为<strong>每一项都是对前一项的描述</strong>，而每一组描述都需要两个字符来完成，所以最终的总字符一定是偶数个</li><li>如果第n项 $A_n$ 的数字序列是 $a_1a_2a_3…a_m$, 共m个数字，其中不重复的有k个（k是不重复的数字个数，如 111122中数字一共有6个，其中不重复数字是1,2一共2个），要表示前一项的 <code>k</code>个不重复数字,至少需要 $2k$个。</li></ul><p>最重要的两个结论是</p><ul><li>根据外观数列的定义可以知道，<strong>每一项都是对前一项的描述</strong>，那可以断定的是，如果数列第n项是 $A_n=a_1a_2a_3a_4a_5a_6…a_{n-1}a_n$，则可以知道前一项 $A_{n-1}$ 是由 $a_2a_4a_6…a_n$ 组成的，因此$a_2\neq a_4$, $a_4\neq a_6$,依次往下，否则就会被合并成同一个组合。例如 <code>111**3**21131221</code> 中偶数位置数字序列 分别是 1,3,1,3,2,1 相邻的两个一定不相等，否则如果是 <code>111**1**21131221</code>，则前面四个数 <code>1111</code>表示前一项对应的两个数字就是 <code>11</code>，而又由<code>描述组合</code>的规则来看，要表示这两个数，下一项应该要用 <code>21</code> 来表示，而不是 <code>1111</code>，所以就会矛盾，所以可知每一项的数字序列中，最多会连续出现相同的数字的数目是3个，不会有连续四个数字相同</li><li>有上面的规律可以进一步推论出一个更重要的结论：任何一项的数字序列中，<strong>一定只由 <code>1,2,3</code> 三个字符中的若干个组成，而不会出现其他数字</strong>，不会出现 4,5,6,…。</li></ul><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>在得出上面两个重要结论之后，可以想到，既然数字序列中最多只可能出现 1,2,3 三个数字的组合，那便可以是一个正则表达式去匹配连续出现的 1, 2, 3 的序列，然后得出这段序列的长度，进而得出下一项的 <code>描述组合</code>，也就可以得到任一项的数字序列了。</p><p>题目要求的是输入一个 <strong>项数n</strong>,输入对应的 <strong>第n项的数字序列</strong>，这里的话可以从第一项开始往后一直递推到第n项。</p><p>好了，扯了这么多，终于要到怎么去用代码解决这个问题的时候了</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {string} */</span><span class="token keyword">var</span> countAndSay <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(1+)|(2+)|(3+)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            next <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> current<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的主要部分就是在这个 <code>for</code>循环，循环主要是用来控制递推的阶数，循环体内的 正则表达式部分便是用来 从上一项递推到出下一项的结果</p><pre class="line-numbers language-js"><code class="language-js">current<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(1+)|(2+)|(3+)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    next <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的正则表达式 <code>/(1+)|(2+)|(3+)/g</code>，用来检测连续出现的 1,2,3</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时： 76ms 38.4%<br>内存： 36.5MB 50%</p><h2 id="神奇的解法"><a href="#神奇的解法" class="headerlink" title="神奇的解法"></a>神奇的解法</h2><p>正当我苦苦思索一种不需要递推而直接得到项数n与其数字序列$A_n$之间的关系的方法，但却百思不得其解的时候，我看到了题解上的一种神奇的方法让我心生敬佩……</p><p><a href="https://leetcode-cn.com/problems/count-and-say/solution/da-biao-ju-ran-4ms-by-ninjayahoo/" target="_blank" rel="noopener">链接</a></p><p><strong>果然啊，还是有人做了我一直想做却不敢做的事情</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string arr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token punctuation">{</span>            <span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">,</span><span class="token string">"21"</span><span class="token punctuation">,</span><span class="token string">"1211"</span><span class="token punctuation">,</span><span class="token string">"111221"</span><span class="token punctuation">,</span><span class="token string">"312211"</span><span class="token punctuation">,</span><span class="token string">"13112221"</span><span class="token punctuation">,</span><span class="token string">"1113213211"</span><span class="token punctuation">,</span><span class="token string">"31131211131221"</span><span class="token punctuation">,</span><span class="token string">"13211311123113112211"</span><span class="token punctuation">,</span><span class="token string">"11131221133112132113212221"</span><span class="token punctuation">,</span><span class="token string">"3113112221232112111312211312113211"</span><span class="token punctuation">,</span><span class="token string">"1321132132111213122112311311222113111221131221"</span><span class="token punctuation">,</span><span class="token string">"11131221131211131231121113112221121321132132211331222113112211"</span><span class="token punctuation">,</span><span class="token string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span><span class="token punctuation">,</span><span class="token string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span><span class="token punctuation">,</span><span class="token string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span><span class="token punctuation">,</span><span class="token string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span><span class="token punctuation">,</span><span class="token string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span><span class="token punctuation">,</span><span class="token string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span><span class="token punctuation">,</span><span class="token string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">,</span><span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span><span class="token punctuation">,</span><span class="token string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan><span class="token punctuation">,</span><span class="token stringspan>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有下面这个还要再来个 <code>switch case</code>  的解法，也是让我虎躯一震 …</p><p><a href="https://leetcode-cn.com/problems/count-and-say/solution/zui-kuai-dai-ma-100wu-di-by-ni-wu-shui-liao-ma-15/" target="_blank" rel="noopener">链接</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"21"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"111221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"312211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"13112221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1113213211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"31131211131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"13211311123113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221133112132113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"3113112221232112111312211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">13</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1321132132111213122112311311222113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">14</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221131211131231121113112221121321132132211331222113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">15</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">17</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">18</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">19</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">20</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">21</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">23</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">24</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">25</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">26</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">27</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">28</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">29</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">30</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token stringspan><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然了，惊讶归惊讶，我还是更愿意相信这几个解法的作者，其实已经用了其他方法来解决了的，上面的枚举法或许只是一个小玩笑。</p><p>又或者，真有神人手算出结果还算对了的话，我是真佩服了…</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 在字符串中查找字串</title>
      <link href="/leetcode/string/strstr/readme/"/>
      <url>/leetcode/string/strstr/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">Leetcode-题目链接</a></p><p><img src="./problem.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/strStr/problem.png" alt=""></p><h2 id="作弊解法-ES6-String-prototype-indexOf"><a href="#作弊解法-ES6-String-prototype-indexOf" class="headerlink" title="作弊解法 ES6 String.prototype.indexOf"></a>作弊解法 ES6 String.prototype.indexOf</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> haystack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>耗时：74ms<br>内存：33.5MB , 非常意外的超过了 <code>100%</code> 的 <code>JS</code>记录，哈哈哈哈哈笑死了</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这还有啥好说的啊… 看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">官方文档</a> 就好了</p><h2 id="解法2-双重for循环实现indexOf"><a href="#解法2-双重for循环实现indexOf" class="headerlink" title="解法2 双重for循环实现indexOf"></a>解法2 双重for循环实现indexOf</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subStr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!==</span> subStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-1"><a href="#效率-1" class="headerlink" title="效率"></a>效率</h3><p>耗时：<code>64ms</code> 65%<br>内存：<code>34.9MB</code>  62.47%</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一层的for循环是用来找出源字符串<code>src</code>和字串<code>subStr</code>相同的首字符的索引<code>i</code>的，找出后再去看源字符串中 <code>i</code>后面与字串相同的一段字串是否与要找的字串<code>subStr</code>相同<br>如果相同则说明所要找的索引就是 <code>i</code>，否则就继续往后找</p><h2 id="解法3-用String-prototype-slice代替for循环"><a href="#解法3-用String-prototype-slice代替for循环" class="headerlink" title="解法3 用String.prototype.slice代替for循环"></a>解法3 用String.prototype.slice代替for循环</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subStr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>subStr <span class="token operator">===</span> src<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效率-2"><a href="#效率-2" class="headerlink" title="效率"></a>效率</h3><p>耗时：<code>56ms</code> 95.9%<br>内存：<code>33.8MB</code>  92.47%</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> subStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subStr <span class="token operator">===</span> src<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> subStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的第二种解法是用了两重for循环一个一个的比较两个字符串的字符是否相等，完全用了很底层的写法，可以完全兼容，但是实际也不需要这样写。<br>第二层 <code>for循环</code> 是在找出 <code>src</code>和 <code>subStr</code> 相同的首字符后再看 <code>src</code>后面与 <code>subStr</code> 长度相同的一段与 <code>subStr</code> 是否相同，而这个可以使用<br><code>slice</code>方法来对 <code>src</code> 切分得到指定索引区间的字串，直接把<code>subStr</code>和切分下来的整段字串进行比较就可以</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="">String.prototype.slice</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode#String 有效括号</title>
      <link href="/leetcode/string/validbracket/readme/"/>
      <url>/leetcode/string/validbracket/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">LeetCode-题目链接</a><br><a href="https://github.com/WenJiang99/leetcode/tree/master/String/validBracket" target="_blank" rel="noopener">Github-链接</a></p><p><img src="./problem.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WenJiang99/leetcode/master/String/validBracket/problem.png" alt=""></p><h2 id="解法1-数组模拟堆栈-64ms-33-7MB"><a href="#解法1-数组模拟堆栈-64ms-33-7MB" class="headerlink" title="解法1 数组模拟堆栈 64ms 33.7MB"></a>解法1 数组模拟堆栈 64ms 33.7MB</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">']'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> bracketMap <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">:</span> <span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">:</span> <span class="token string">'{'</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> bracketMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> bracketMap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解法2的思路其实和解法1几乎完全一致，就是用一个<code>Object</code>来代替了 <code>switch case</code> ，解法2的写法比解法1要优雅一些，但是执行效率比解法1要低一些。<br><strong>果然还是鱼和熊掌不可兼得，唯独丑和单身可以啊</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 最长公前缀</title>
      <link href="/leetcode/string/longestcommonprefix/readme/"/>
      <url>/leetcode/string/longestcommonprefix/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">Leetcode-题目链接</a></p><h2 id="解法1-68ms-36-7MB"><a href="#解法1-68ms-36-7MB" class="headerlink" title="解法1 68ms 36.7MB"></a>解法1 68ms 36.7MB</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** *  * @param {String} str1  * @param {String} str2  * @returns {String} */</span><span class="token keyword">function</span> <span class="token function">getCommonPrefix</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        prefix <span class="token operator">+</span><span class="token operator">=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string[]} strs * @return {string} */</span><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> strs <span class="token operator">&amp;&amp;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefix<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        prefix <span class="token operator">=</span> <span class="token function">getCommonPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解法2-56ms-33-9MB"><a href="#解法2-56ms-33-9MB" class="headerlink" title="解法2 56ms 33.9MB"></a>解法2 56ms 33.9MB</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string[]} strs * @return {string} */</span><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>prefix<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>上面解法1的弊端在于需要调用外部函数，因此会消耗较多的内存，因此要优化内存的话，应该想办法把外部函数调用的地方用内置函数来替代。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>prefix<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这个 <code>while</code> 循环中通过判断 <code>strs[i].indexOf(prefix) !=0</code>来进行前缀检索。应该清楚的是，这个语句得到 <code>0</code> 的情况有两种</p><ul><li>一是 <code>strs[i]</code> 中包含了 <code>prefix</code>字串，且开始的索引是 <code>0</code>，也即字符串开头，这种情况就是得到的前一个字符串和当前字符串的最长公共前缀，则此时跳出 <code>while</code> 循环，再对下一个字符串进行相同处理</li></ul><ul><li>另一个则是在 <code>prefix</code> 是空字符串的时候，<code>strs[i].indexOf(prefix)</code> 也会得到0，这种情况说明两个字符串没有共同前缀，此时整个函数都可以直接 <code>return</code>一个空字符串了</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">String.prototype.indexOf</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 罗马数字转换成整数</title>
      <link href="/leetcode/string/roman2int/readme/"/>
      <url>/leetcode/string/roman2int/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">Leetcode-题目链接</a></p><h2 id="正则表达式解法"><a href="#正则表达式解法" class="headerlink" title="正则表达式解法"></a>正则表达式解法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> seperator <span class="token operator">=</span> <span class="token string">'-'</span><span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IV'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IX'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XL'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XC'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">90</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CD'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CM'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">900</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> normalString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        total <span class="token operator">+</span><span class="token operator">=</span> __charMap<span class="token punctuation">[</span>m<span class="token punctuation">]</span>        <span class="token keyword">return</span> seperator    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> normalString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>seperator<span class="token punctuation">,</span> <span class="token string">'ig'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token keyword">return</span> sum <span class="token operator">+</span> __charMap<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token string">"MCMXCIV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个解法的思路是想到直接把输入的字符串拆开成每一个单个字符，然后映射到对应的整数，然后做个累加。但是因为有六个数字是由两个字符组合来表示的，所以需要先把这些特殊数字找出来先处理掉，留下的都是可以直接单个映射的字符，就可以直接拆开相加了。</p><p>下面的代码部分就是用来匹配六个特殊数字的，匹配到之后对其进行映射、累加，然后把字符串换成一个分隔符 <code>-</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> normalString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    total <span class="token operator">+</span><span class="token operator">=</span> __charMap<span class="token punctuation">[</span>m<span class="token punctuation">]</span>    <span class="token keyword">return</span> seperator<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的部分则是对已经处理掉六个特殊字符的字符串直接拆开成单个字符进行映射累加得到结果了。调用的是数组的 <code>reduce</code> 方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> target <span class="token operator">=</span> normalString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>seperator<span class="token punctuation">,</span> <span class="token string">'ig'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum <span class="token operator">+</span> __charMap<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>开始写的解法是用来一个对象来做罗马数字和整数的映射,但是发现这样的写法效率会比 <code>switch case</code>要低一些，所以换成了一个 <code>switch case</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> __charMap <span class="token operator">=</span> <span class="token punctuation">{</span>    I<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    V<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    X<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    L<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    C<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    D<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    M<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    IV<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    IX<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>    XL<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    XC<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>    CD<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    CM<span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式解法2"><a href="#正则表达式解法2" class="headerlink" title="正则表达式解法2"></a>正则表达式解法2</h2><p>上面解法写完之后发现执行起来效率很低，因为存在着大量的正则匹配。后面发现其实可以直接把两个正则表达式合并在一起只处理一次就可以完成全部映射</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IV'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'IX'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XL'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'XC'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">90</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CD'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'CM'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">900</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)|([IVXLCDM])/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        total <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为罗马字符串一定是大的数字在小的数字的左边的，而字符串在匹配时候也是按照 <strong>从左到右</strong>的顺序进行检索，正则表达式匹配检测时候也按照 <strong>从左到右</strong>来检测，因此如果前面的分组匹配成功，就马上执行回调函数，然后只需要在回调函数里处理对应字符，然后匹配到的字符删去就可以</p><p>合并后的正则，六个特殊数字需要放在普通单个字符的前面</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(IV)|(IX)|(XL)|(XC)|(CD)|(CM)|([IVXLCDM])/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    total <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组遍历解法"><a href="#数组遍历解法" class="headerlink" title="数组遍历解法"></a>数组遍历解法</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">let</span> dic <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> last <span class="token operator">=</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cur <span class="token operator">=</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> last        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sum <span class="token operator">-</span><span class="token operator">=</span> last        <span class="token punctuation">}</span>        last <span class="token operator">=</span> cur    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum <span class="token operator">+</span> last<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">RegExp-正则表达式</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">String.prototype.replace</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/personal-resume/"/>
      <url>/personal-resume/</url>
      
        <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>姓名：廖文江</li><li>性别：男</li><li>学校：华中师范大学 本科大三</li><li>专业：通信工程专业</li><li>兴趣爱好：听歌、跑步、打篮球</li><li>Email：<a href="mailto:fireworksman@163.com">fireworksman@163.com</a></li><li>个人博客：<a href="http://blog.wenjiang.info">http://blog.wenjiang.info</a></li><li>Github：<a href="https://github.com/WenJiang99" target="_blank" rel="noopener">WenJiang99</a></li></ul><h2 id="主要技能"><a href="#主要技能" class="headerlink" title="主要技能"></a>主要技能</h2><p><code>Javascript</code> , <code>Typescript</code> , <code>CSS</code> , <code>HTML</code> , <code>React</code> , <code>Taro</code> , <code>NodeJs</code> , <code>Koa</code> , <code>EggJs</code> , <code>Webpack</code>, <code>Mysql</code> , <code>MongoDB</code></p><h2 id="主要课程"><a href="#主要课程" class="headerlink" title="主要课程"></a>主要课程</h2><ul><li>《模拟电子技术》</li><li>《数字电子技术》</li><li>《数据结构》</li><li>《操作系统》</li><li>《计算机网络》</li><li>《数据库原理与应用》</li></ul><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><h3 id="2019-07-04-–-2019-08-31-大二暑假"><a href="#2019-07-04-–-2019-08-31-大二暑假" class="headerlink" title="2019.07.04 – 2019.08-31 (大二暑假)"></a>2019.07.04 – 2019.08-31 (大二暑假)</h3><ul><li>公司：武汉金山WPS</li><li>部门：商业化产品研发(前端开发)</li><li>工作：主要从事于 <strong>小程序</strong> 开发，使用的是<strong>Taro</strong>框架，主要技术栈是 <code>React</code> + <code>Less</code> + <code>Typescript</code></li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><h3 id="2019-10-30-–-2019-11-15-大三上"><a href="#2019-10-30-–-2019-11-15-大三上" class="headerlink" title="2019.10.30 – 2019.11.15 (大三上)"></a>2019.10.30 – 2019.11.15 (大三上)</h3><ul><li>项目名称：新媒体大赛项目（校级）</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/new-media-re" target="_blank" rel="noopener">new-media-re</a></li><li>项目简介：基于 <code>React</code> + <code>React-Router</code> + <code>Antd</code> 的静态页面项目</li></ul><h3 id="2019-11-30-–-2019-12-08-大三上"><a href="#2019-11-30-–-2019-12-08-大三上" class="headerlink" title="2019.11.30 – 2019.12.08 (大三上)"></a>2019.11.30 – 2019.12.08 (大三上)</h3><ul><li>项目名称：文创比赛项目（省级）</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/cultural-creation-re" target="_blank" rel="noopener">cultural-creation</a></li><li>项目简介：基于 <code>React</code> + <code>React-Router</code> + <code>Antd</code> 的静态页面项目</li></ul><h3 id="2020-01-14-–-2020-04-10-（大三寒假）"><a href="#2020-01-14-–-2020-04-10-（大三寒假）" class="headerlink" title="2020.01.14 – 2020.04.10 （大三寒假）"></a>2020.01.14 – 2020.04.10 （大三寒假）</h3><ul><li>项目名称：一个类似于课程管理平台的前端项目之一</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/courses-teacher" target="_blank" rel="noopener">courses-teacher</a></li><li>项目简介：一个基于 <code>Typescript</code>+ <code>React</code>+<code>React-Router</code> +<code>Redux</code> + <code>webpack</code> + <code>Antd</code> + <code>docker</code> 的H5移动端项目</li></ul><h3 id="2020-01-14-–2020-04-10-大三寒假"><a href="#2020-01-14-–2020-04-10-大三寒假" class="headerlink" title="2020.01.14 –2020.04.10 (大三寒假)"></a>2020.01.14 –2020.04.10 (大三寒假)</h3><ul><li>项目名称：一个类似于课程管理平台的后端服务器</li><li>团队分工：核心开发</li><li>仓库地址：<a href="https://github.com/WenJiang99/courses-server" target="_blank" rel="noopener">courses-server</a></li><li>项目简介：一个基于 <code>Koa</code> + <code>Typescript</code> + <code>mongoose</code> + <code>docker</code> 的 Node服务器</li></ul><h2 id="荣誉-amp-证书"><a href="#荣誉-amp-证书" class="headerlink" title="荣誉&amp;证书"></a>荣誉&amp;证书</h2><ul><li>英语四级证书</li><li>英语六级证书</li><li>计算机二级(python)</li><li>实习证明（前端开发）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
            <tag> 信息 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
